C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN ..\obj\led.obj
COMPILER INVOKED BY: D:\Program Files\KEILC51\files\C51\BIN\C51.EXE ..\..\user\led.c BROWSE DEBUG OBJECTEXTEND LISTINCLU
                    -DE SYMBOLS PRINT(.\led.lst) TABS(2) OBJECT(..\obj\led.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    
   4            * @author  
   5            * @version 
   6            * @date   
   7            * @brief   
   8            ******************************************************************************  
   9            * 
  10            * 
  11            ******************************************************************************
  12            */
  13          /*-- includes ----------------------------------------------------------------*/
  14          #include "./led.h"
   1      =1  /**
   2      =1    ******************************************************************************
   3      =1    * @file    
   4      =1    * @author  
   5      =1    * @version 
   6      =1    * @date   
   7      =1    * @brief   
   8      =1    ******************************************************************************  
   9      =1    * 
  10      =1    * 
  11      =1    ******************************************************************************
  12      =1    */
  13      =1  #ifndef    LED_H
  14      =1  #define    LED_H
  15      =1  
  16      =1  
  17      =1  /*-- includes  ---------------------------------------------------------------*/
  18      =1  #include "./system.h"
   1      =2  /**
   2      =2    ******************************************************************************
   3      =2    * @file    
   4      =2    * @author  
   5      =2    * @version 
   6      =2    * @date   
   7      =2    * @brief   
   8      =2    ******************************************************************************  
   9      =2    * 
  10      =2    * 
  11      =2    ******************************************************************************
  12      =2    */
  13      =2  #ifndef    SYSTEM_H
  14      =2  #define    SYSTEM_H
  15      =2  
  16      =2  
  17      =2  /*-- includes  ---------------------------------------------------------------*/
  18      =2  #include <stdio.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  STDIO.H
   3      =3  
   4      =3  Prototypes for standard I/O functions.
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 2   

   5      =3  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __STDIO_H__
  10      =3  #define __STDIO_H__
  11      =3  
  12      =3  #ifndef EOF
  13      =3   #define EOF -1
  14      =3  #endif
  15      =3  
  16      =3  #ifndef NULL
  17      =3   #define NULL ((void *) 0)
  18      =3  #endif
  19      =3  
  20      =3  #ifndef _SIZE_T
  21      =3   #define _SIZE_T
  22      =3   typedef unsigned int size_t;
  23      =3  #endif
  24      =3  
  25      =3  #pragma SAVE
  26      =3  #pragma REGPARMS
  27      =3  extern char _getkey (void);
  28      =3  extern char getchar (void);
  29      =3  extern char ungetchar (char);
  30      =3  extern char putchar (char);
  31      =3  extern int printf   (const char *, ...);
  32      =3  extern int sprintf  (char *, const char *, ...);
  33      =3  extern int vprintf  (const char *, char *);
  34      =3  extern int vsprintf (char *, const char *, char *);
  35      =3  extern char *gets (char *, int n);
  36      =3  extern int scanf (const char *, ...);
  37      =3  extern int sscanf (char *, const char *, ...);
  38      =3  extern int puts (const char *);
  39      =3  
  40      =3  #pragma RESTORE
  41      =3  
  42      =3  #endif
  43      =3  
  19      =2  #include "../includes/_sys_config.h"
   1      =3  /**
   2      =3    ******************************************************************************
   3      =3    * @file    
   4      =3    * @author  
   5      =3    * @version 
   6      =3    * @date   
   7      =3    * @brief   
   8      =3    ******************************************************************************  
   9      =3    * 
  10      =3    * 
  11      =3    ******************************************************************************
  12      =3    */
  13      =3  #ifndef    _SYS_CONFIG_H
  14      =3  #define    _SYS_CONFIG_H
  15      =3  
  16      =3  
  17      =3  /* C++ support */
  18      =3  #ifdef __cplusplus
           =3 extern "C" {
           =3 #endif
  21      =3  
  22      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 3   

  23      =3  #include "./_sys_std.h"
   1      =4  /**
   2      =4    ******************************************************************************
   3      =4    * @file    
   4      =4    * @author  
   5      =4    * @version 
   6      =4    * @date   
   7      =4    * @brief   
   8      =4    ******************************************************************************  
   9      =4    * 
  10      =4    * 
  11      =4    ******************************************************************************
  12      =4    */
  13      =4  #ifndef  _SYS_STD_H
  14      =4  #define  _SYS_STD_H
  15      =4  
  16      =4  
  17      =4  /* C++支持 */
  18      =4  #ifdef __cplusplus
           =4 extern "C" {
           =4 #endif
  21      =4   
  22      =4  
  23      =4  
  24      =4  /*!< Signed integer types  */
  25      =4  typedef         signed char             s8_t;
  26      =4  typedef         signed int              s16_t;
  27      =4  typedef         signed long             s32_t;
  28      =4  
  29      =4  /*!< Unsigned integer types  */
  30      =4  typedef         unsigned char           u8_t;
  31      =4  typedef         unsigned int            u16_t;
  32      =4  typedef         unsigned long           u32_t;
  33      =4  
  34      =4  
  35      =4  #define       XDATA    xdata
  36      =4  #define       IDATA    idata
  37      =4  #define       BDATA    bdata
  38      =4  #define       DATA     data
  39      =4  #define       CODE     code
  40      =4  
  41      =4  
  42      =4  /* 把宏参数变为一个字符串 */
  43      =4  #define     _STRING(x)                  #x
  44      =4  #define     STRING(x)                   _STRING(x)
  45      =4  
  46      =4  /* 把宏参数连接在一起 */
  47      =4  #define     _CONNECT_MACRO(x,y)         x##y
  48      =4  #define     CONNECT_MACRO(x,y)          _CONNECT_MACRO(x,y)
  49      =4  
  50      =4  
  51      =4  /* 状态类型 */
  52      =4  typedef  enum
  53      =4  {
  54      =4    OPERATE_OK  = 0,
  55      =4    OPERATE_BUSY,
  56      =4    OPERATE_TIMEOUT,
  57      =4    OPERATE_FAIL,
  58      =4  }OpsStatus;
  59      =4  
  60      =4  
  61      =4  #ifndef  _IN_LINE_
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 4   

  62      =4    #define  _IN_LINE_   inline
  63      =4  #endif
  64      =4  
  65      =4  #ifndef   BOOL
  66      =4    #define   BOOL      bool
  67      =4  #endif
  68      =4  
  69      =4  #ifndef   NULL
           =4   #define   NULL     (void*)0
           =4 #endif
  72      =4  
  73      =4  
  74      =4  #ifndef  TRUE
  75      =4    #define   TRUE    1
  76      =4  #endif
  77      =4  
  78      =4  #ifndef  FALSE
  79      =4    #define   FALSE    0
  80      =4  #endif
  81      =4  
  82      =4  /* 纯虚函数关键字 */
  83      =4  #ifndef   VIRTUAL
  84      =4    #define   VIRTUAL
  85      =4  #endif
  86      =4  
  87      =4  
  88      =4  
  89      =4  
  90      =4  #ifdef __cplusplus
           =4 }
           =4 #endif
  93      =4  
  94      =4  #endif    /* _SYS_STD_H */
  95      =4  
  96      =4  /*------------------ end of file ---------------------------------------------*/
  24      =3  
  25      =3  
  26      =3  /*< Configure the watchdog function.  0: disable; 1:enable. >*/
  27      =3  #define     WDT_ENABLE                                 1
  28      =3  
  29      =3  /*< Log output configuration. 0: disable; 1:enable. >*/
  30      =3  #define     LOG_ENABLE                                 1
  31      =3  
  32      =3  /*< Console configuration. 0: disable; 1:enable. >*/
  33      =3  #define     CONSOLE_ENABLE                             1
  34      =3  
  35      =3  
  36      =3  
  37      =3  
  38      =3  /* C++ support */
  39      =3  #ifdef __cplusplus
           =3 }
           =3 #endif
  42      =3  
  43      =3  
  44      =3  #endif   /* _SYS_CONFIG_H */
  45      =3  
  46      =3  /*---------------------- end of file -----------------------------------------*/
  20      =2  #include "../mcu/N76E003.h"
   1      =3  /*--------------------------------------------------------------------------
   2      =3  N76E003.H
   3      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 5   

   4      =3  Header file for Nuvoton N76E003
   5      =3  --------------------------------------------------------------------------*/
   6      =3  
   7      =3  sfr P0          = 0x80;
   8      =3  sfr SP          = 0x81;
   9      =3  sfr DPL         = 0x82;
  10      =3  sfr DPH         = 0x83;
  11      =3  sfr RCTRIM0     = 0x84;
  12      =3  sfr RCTRIM1     = 0x85; 
  13      =3  sfr RWK         = 0x86;
  14      =3  sfr PCON        = 0x87;
  15      =3  
  16      =3  sfr TCON        = 0x88;
  17      =3  sfr TMOD        = 0x89;
  18      =3  sfr TL0         = 0x8A;
  19      =3  sfr TL1         = 0x8B;
  20      =3  sfr TH0         = 0x8C;
  21      =3  sfr TH1         = 0x8D;
  22      =3  sfr CKCON       = 0x8E;
  23      =3  sfr WKCON       = 0x8F;
  24      =3  
  25      =3  sfr P1          = 0x90;
  26      =3  sfr SFRS        = 0x91; //TA Protection
  27      =3  sfr CAPCON0     = 0x92;
  28      =3  sfr CAPCON1     = 0x93;
  29      =3  sfr CAPCON2     = 0x94;
  30      =3  sfr CKDIV       = 0x95;
  31      =3  sfr CKSWT       = 0x96; //TA Protection
  32      =3  sfr CKEN        = 0x97; //TA Protection
  33      =3  
  34      =3  sfr SCON        = 0x98;
  35      =3  sfr SBUF        = 0x99;
  36      =3  sfr SBUF_1      = 0x9A;
  37      =3  sfr EIE         = 0x9B;
  38      =3  sfr EIE1        = 0x9C;
  39      =3  sfr CHPCON      = 0x9F; //TA Protection
  40      =3  
  41      =3  sfr P2          = 0xA0;
  42      =3  sfr AUXR1       = 0xA2;
  43      =3  sfr BODCON0     = 0xA3; //TA Protection
  44      =3  sfr IAPTRG      = 0xA4; //TA Protection
  45      =3  sfr IAPUEN      = 0xA5; //TA Protection
  46      =3  sfr IAPAL       = 0xA6;
  47      =3  sfr IAPAH       = 0xA7;
  48      =3  
  49      =3  sfr IE          = 0xA8;
  50      =3  sfr SADDR       = 0xA9;
  51      =3  sfr WDCON       = 0xAA; //TA Protection
  52      =3  sfr BODCON1     = 0xAB; //TA Protection
  53      =3  sfr P3M1        = 0xAC;
  54      =3  sfr P3S         = 0xAC; //Page1
  55      =3  sfr P3M2        = 0xAD;
  56      =3  sfr P3SR        = 0xAD; //Page1
  57      =3  sfr IAPFD       = 0xAE;
  58      =3  sfr IAPCN       = 0xAF;
  59      =3  
  60      =3  sfr P3          = 0xB0;
  61      =3  sfr P0M1        = 0xB1;
  62      =3  sfr P0S         = 0xB1; //Page1
  63      =3  sfr P0M2        = 0xB2;
  64      =3  sfr P0SR        = 0xB2; //Page1
  65      =3  sfr P1M1        = 0xB3;
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 6   

  66      =3  sfr P1S         = 0xB3; //Page1
  67      =3  sfr P1M2        = 0xB4;
  68      =3  sfr P1SR        = 0xB4; //Page1
  69      =3  sfr P2S         = 0xB5; 
  70      =3  sfr IPH         = 0xB7;
  71      =3  sfr PWMINTC     = 0xB7; //Page1
  72      =3  
  73      =3  sfr IP          = 0xB8;
  74      =3  sfr SADEN       = 0xB9;
  75      =3  sfr SADEN_1     = 0xBA;
  76      =3  sfr SADDR_1     = 0xBB;
  77      =3  sfr I2DAT       = 0xBC;
  78      =3  sfr I2STAT      = 0xBD;
  79      =3  sfr I2CLK       = 0xBE;
  80      =3  sfr I2TOC       = 0xBF;
  81      =3  
  82      =3  sfr I2CON       = 0xC0;
  83      =3  sfr I2ADDR      = 0xC1;
  84      =3  sfr ADCRL       = 0xC2;
  85      =3  sfr ADCRH       = 0xC3;
  86      =3  sfr T3CON       = 0xC4;
  87      =3  sfr PWM4H       = 0xC4; //Page1
  88      =3  sfr RL3         = 0xC5;
  89      =3  sfr PWM5H       = 0xC5; //Page1
  90      =3  sfr RH3         = 0xC6;
  91      =3  sfr PIOCON1     = 0xC6; //Page1
  92      =3  sfr TA          = 0xC7;
  93      =3  
  94      =3  sfr T2CON       = 0xC8;
  95      =3  sfr T2MOD       = 0xC9;
  96      =3  sfr RCMP2L      = 0xCA;
  97      =3  sfr RCMP2H      = 0xCB;
  98      =3  sfr TL2         = 0xCC; 
  99      =3  sfr PWM4L       = 0xCC; //Page1
 100      =3  sfr TH2         = 0xCD;
 101      =3  sfr PWM5L       = 0xCD; //Page1
 102      =3  sfr ADCMPL      = 0xCE;
 103      =3  sfr ADCMPH      = 0xCF;
 104      =3  
 105      =3  sfr PSW         = 0xD0;
 106      =3  sfr PWMPH       = 0xD1;
 107      =3  sfr PWM0H       = 0xD2;
 108      =3  sfr PWM1H       = 0xD3;
 109      =3  sfr PWM2H       = 0xD4;
 110      =3  sfr PWM3H       = 0xD5;
 111      =3  sfr PNP         = 0xD6;
 112      =3  sfr FBD         = 0xD7;
 113      =3  
 114      =3  sfr PWMCON0     = 0xD8;
 115      =3  sfr PWMPL       = 0xD9;
 116      =3  sfr PWM0L       = 0xDA;
 117      =3  sfr PWM1L       = 0xDB;
 118      =3  sfr PWM2L       = 0xDC;
 119      =3  sfr PWM3L       = 0xDD;
 120      =3  sfr PIOCON0     = 0xDE;
 121      =3  sfr PWMCON1     = 0xDF;
 122      =3  
 123      =3  sfr ACC         = 0xE0;
 124      =3  sfr ADCCON1     = 0xE1;
 125      =3  sfr ADCCON2     = 0xE2;
 126      =3  sfr ADCDLY      = 0xE3;
 127      =3  sfr C0L         = 0xE4;
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 7   

 128      =3  sfr C0H         = 0xE5;
 129      =3  sfr C1L         = 0xE6;
 130      =3  sfr C1H         = 0xE7;
 131      =3  
 132      =3  sfr ADCCON0     = 0xE8;
 133      =3  sfr PICON       = 0xE9;
 134      =3  sfr PINEN       = 0xEA;
 135      =3  sfr PIPEN       = 0xEB;
 136      =3  sfr PIF         = 0xEC;
 137      =3  sfr C2L         = 0xED;
 138      =3  sfr C2H         = 0xEE;
 139      =3  sfr EIP         = 0xEF;
 140      =3  
 141      =3  sfr B           = 0xF0;
 142      =3  sfr CAPCON3     = 0xF1;
 143      =3  sfr CAPCON4     = 0xF2;
 144      =3  sfr SPCR        = 0xF3;
 145      =3  sfr SPCR2       = 0xF3; //Page1
 146      =3  sfr SPSR        = 0xF4;
 147      =3  sfr SPDR        = 0xF5;
 148      =3  sfr AINDIDS     = 0xF6;
 149      =3  sfr EIPH        = 0xF7;
 150      =3  
 151      =3  sfr SCON_1      = 0xF8;
 152      =3  sfr PDTEN       = 0xF9; //TA Protection
 153      =3  sfr PDTCNT      = 0xFA; //TA Protection
 154      =3  sfr PMEN        = 0xFB;
 155      =3  sfr PMD         = 0xFC;
 156      =3  sfr EIP1        = 0xFE;
 157      =3  sfr EIPH1       = 0xFF;
 158      =3  
 159      =3  /*  BIT Registers  */
 160      =3  /*  SCON_1  */
 161      =3  sbit SM0_1      = SCON_1^7;
 162      =3  sbit FE_1       = SCON_1^7; 
 163      =3  sbit SM1_1      = SCON_1^6; 
 164      =3  sbit SM2_1      = SCON_1^5; 
 165      =3  sbit REN_1      = SCON_1^4; 
 166      =3  sbit TB8_1      = SCON_1^3; 
 167      =3  sbit RB8_1      = SCON_1^2; 
 168      =3  sbit TI_1       = SCON_1^1; 
 169      =3  sbit RI_1       = SCON_1^0; 
 170      =3  
 171      =3  /*  ADCCON0  */
 172      =3  sbit ADCF       = ADCCON0^7;
 173      =3  sbit ADCS       = ADCCON0^6;
 174      =3  sbit ETGSEL1    = ADCCON0^5;
 175      =3  sbit ETGSEL0    = ADCCON0^4;
 176      =3  sbit ADCHS3     = ADCCON0^3;
 177      =3  sbit ADCHS2     = ADCCON0^2;
 178      =3  sbit ADCHS1     = ADCCON0^1;
 179      =3  sbit ADCHS0     = ADCCON0^0;
 180      =3  
 181      =3  /*  PWMCON0  */
 182      =3  sbit PWMRUN     = PWMCON0^7;
 183      =3  sbit LOAD       = PWMCON0^6;
 184      =3  sbit PWMF       = PWMCON0^5;
 185      =3  sbit CLRPWM     = PWMCON0^4;
 186      =3  
 187      =3  
 188      =3  /*  PSW */
 189      =3  sbit CY         = PSW^7;
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 8   

 190      =3  sbit AC         = PSW^6;
 191      =3  sbit F0         = PSW^5;
 192      =3  sbit RS1        = PSW^4;
 193      =3  sbit RS0        = PSW^3;
 194      =3  sbit OV         = PSW^2;
 195      =3  sbit P          = PSW^0;
 196      =3  
 197      =3  /*  T2CON  */
 198      =3  sbit TF2        = T2CON^7;
 199      =3  sbit TR2        = T2CON^2;
 200      =3  sbit CM_RL2     = T2CON^0;
 201      =3   
 202      =3  /*  I2CON  */
 203      =3  sbit I2CEN      = I2CON^6;
 204      =3  sbit STA        = I2CON^5;
 205      =3  sbit STO        = I2CON^4;
 206      =3  sbit SI         = I2CON^3;
 207      =3  sbit AA         = I2CON^2;
 208      =3  sbit I2CPX  = I2CON^0;
 209      =3  
 210      =3  /*  IP  */  
 211      =3  sbit PADC       = IP^6;
 212      =3  sbit PBOD       = IP^5;
 213      =3  sbit PS         = IP^4;
 214      =3  sbit PT1        = IP^3;
 215      =3  sbit PX1        = IP^2;
 216      =3  sbit PT0        = IP^1;
 217      =3  sbit PX0        = IP^0;
 218      =3  
 219      =3  /*  P3  */  
 220      =3  sbit P30    = P3^0;
 221      =3  
 222      =3  
 223      =3  /*  IE  */
 224      =3  sbit EA         = IE^7;
 225      =3  sbit EADC       = IE^6;
 226      =3  sbit EBOD       = IE^5;
 227      =3  sbit ES         = IE^4;
 228      =3  sbit ET1        = IE^3;
 229      =3  sbit EX1        = IE^2;
 230      =3  sbit ET0        = IE^1;
 231      =3  sbit EX0        = IE^0;
 232      =3  
 233      =3  /*  P2  */ 
 234      =3  sbit P20        = P2^0;
 235      =3  
 236      =3  /*  SCON  */
 237      =3  sbit SM0        = SCON^7;
 238      =3  sbit FE         = SCON^7; 
 239      =3  sbit SM1        = SCON^6; 
 240      =3  sbit SM2        = SCON^5; 
 241      =3  sbit REN        = SCON^4; 
 242      =3  sbit TB8        = SCON^3; 
 243      =3  sbit RB8        = SCON^2; 
 244      =3  sbit TI         = SCON^1; 
 245      =3  sbit RI         = SCON^0; 
 246      =3  
 247      =3  /*  P1  */     
 248      =3  sbit P17  = P1^7;
 249      =3  sbit P16  = P1^6;
 250      =3  sbit TXD_1  = P1^6; 
 251      =3  sbit P15  = P1^5;
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 9   

 252      =3  sbit P14  = P1^4;
 253      =3  sbit SDA  = P1^4;    
 254      =3  sbit P13  = P1^3;
 255      =3  sbit SCL  = P1^3;  
 256      =3  sbit P12        = P1^2; 
 257      =3  sbit P11        = P1^1;
 258      =3  sbit P10        = P1^0;
 259      =3  
 260      =3  /*  TCON  */
 261      =3  sbit TF1        = TCON^7;
 262      =3  sbit TR1        = TCON^6;
 263      =3  sbit TF0        = TCON^5;
 264      =3  sbit TR0        = TCON^4;
 265      =3  sbit IE1        = TCON^3;
 266      =3  sbit IT1        = TCON^2;
 267      =3  sbit IE0        = TCON^1;
 268      =3  sbit IT0        = TCON^0;
 269      =3  
 270      =3  /*  P0  */  
 271      =3  
 272      =3  sbit P07        = P0^7;
 273      =3  sbit RXD        = P0^7;
 274      =3  sbit P06        = P0^6;
 275      =3  sbit TXD        = P0^6;
 276      =3  sbit P05        = P0^5;
 277      =3  sbit P04        = P0^4;
 278      =3  sbit STADC        = P0^4;
 279      =3  sbit P03        = P0^3;
 280      =3  sbit P02        = P0^2;
 281      =3  sbit RXD_1        = P0^2;
 282      =3  sbit P01        = P0^1;
 283      =3  sbit MISO       = P0^1;
 284      =3  sbit P00        = P0^0;
 285      =3  sbit MOSI       = P0^0;
 286      =3  
 287      =3  
 288      =3  
 289      =3  
 290      =3  
 291      =3  
 292      =3  
 293      =3  
 294      =3  
 295      =3  
 296      =3  
 297      =3  
 298      =3  
 299      =3  
 300      =3  
 301      =3  
 302      =3  
 303      =3  
 304      =3  
  21      =2  #include "../mcu/SFR_Macro.h"
   1      =3  
   2      =3  /**** P0    80H *****/
   3      =3  #define set_P00     P00   =   1
   4      =3  #define set_P01     P01   =   1
   5      =3  #define set_P02     P02   =   1
   6      =3  #define set_P03     P03   =   1
   7      =3  #define set_P04     P04   =   1
   8      =3  #define set_P05     P05   =   1
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 10  

   9      =3  #define set_P06     P06   =   1
  10      =3  #define set_P07     P07   =   1
  11      =3  
  12      =3  #define clr_P00     P00   =   0
  13      =3  #define clr_P01     P01   =   0
  14      =3  #define clr_P02     P02   =   0
  15      =3  #define clr_P03     P03   =   0
  16      =3  #define clr_P04     P04   =   0
  17      =3  #define clr_P05     P05   =   0
  18      =3  #define clr_P06     P06   =   0
  19      =3  #define clr_P07     P07   =   0
  20      =3  
  21      =3  //**** SP   81H **** 
  22      =3  //**** DPH  82H **** 
  23      =3  //**** DPL  83H **** 
  24      =3  //**** RWK  86H **** 
  25      =3  
  26      =3  //**** PCON 87H *****
  27      =3  #define set_SMOD    PCON    |= SET_BIT7
  28      =3  #define set_SMOD0   PCON    |= SET_BIT6
  29      =3  #define set_POF     PCON    |= SET_BIT4
  30      =3  #define set_GF1     PCON    |= SET_BIT3
  31      =3  #define set_GF0     PCON    |= SET_BIT2 
  32      =3  #define set_PD      PCON    |= SET_BIT1
  33      =3  #define set_IDL     PCON    |= SET_BIT0
  34      =3                              
  35      =3  #define clr_SMOD    PCON    &= ~SET_BIT7
  36      =3  #define clr_SMOD0   PCON    &= ~SET_BIT6
  37      =3  #define clr_POF     PCON    &= ~SET_BIT4
  38      =3  #define clr_GF1     PCON    &= ~SET_BIT3
  39      =3  #define clr_GF0     PCON    &= ~SET_BIT2 
  40      =3  #define clr_PD      PCON    &= ~SET_BIT1
  41      =3  #define clr_IDL     PCON    &= ~SET_BIT0
  42      =3  
  43      =3  /**** TCON    88H ****/
  44      =3  #define set_TF1     TF1   =   1
  45      =3  #define set_TR1     TR1   =   1
  46      =3  #define set_TF0     TF0   =   1
  47      =3  #define set_TR0     TR0   =   1
  48      =3  #define set_IE1     IE1   =   1
  49      =3  #define set_IT1     IT1   =   1
  50      =3  #define set_IE0     IE0   =   1
  51      =3  #define set_IT0     IT0   =   1
  52      =3  
  53      =3  #define clr_TF1     TF1   =   0
  54      =3  #define clr_TR1     TR1   =   0
  55      =3  #define clr_TF0     TF0   =   0
  56      =3  #define clr_TR0     TR0   =   0
  57      =3  #define clr_IE1     IE1   =   0
  58      =3  #define clr_IT1     IT1   =   0
  59      =3  #define clr_IE0     IE0   =   0
  60      =3  #define clr_IT0     IT0   =   0
  61      =3  
  62      =3  //**** TMOD   89H **** 
  63      =3  #define set_GATE_T1   TMOD    |=  SET_BIT7
  64      =3  #define set_CT_T1     TMOD    |=  SET_BIT6
  65      =3  #define set_M1_T1     TMOD    |=  SET_BIT5
  66      =3  #define set_M0_T1     TMOD    |=  SET_BIT4
  67      =3  #define set_GATE_T0   TMOD    |=  SET_BIT3
  68      =3  #define set_CT_T0     TMOD    |=  SET_BIT2
  69      =3  #define set_M1_T0     TMOD    |=  SET_BIT1
  70      =3  #define set_M0_T0     TMOD    |=  SET_BIT0
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 11  

  71      =3                              
  72      =3  #define clr_GATE_T1   TMOD    &=  ~SET_BIT7
  73      =3  #define clr_CT_T1     TMOD    &=  ~SET_BIT6
  74      =3  #define clr_M1_T1     TMOD    &=  ~SET_BIT5
  75      =3  #define clr_M0_T1     TMOD    &=  ~SET_BIT4
  76      =3  #define clr_GATE_T0   TMOD    &=  ~SET_BIT3
  77      =3  #define clr_CT_T0     TMOD    &=  ~SET_BIT2
  78      =3  #define clr_M1_T0     TMOD    &=  ~SET_BIT1
  79      =3  #define clr_M0_T0     TMOD    &=  ~SET_BIT0
  80      =3  
  81      =3  //**** TH1    8AH **** 
  82      =3  //**** TH0    8BH **** 
  83      =3  //**** TL1    8CH **** 
  84      =3  //**** TL0    8DH **** 
  85      =3  
  86      =3  //**** CKCON  8EH ****
  87      =3  #define set_PWMCKS  CKCON   |= SET_BIT6
  88      =3  #define set_T1M     CKCON   |= SET_BIT4
  89      =3  #define set_T0M     CKCON   |= SET_BIT3
  90      =3  #define set_CLOEN   CKCON   |= SET_BIT1
  91      =3                              
  92      =3  #define clr_PWMCKS  CKCON   &= ~SET_BIT6
  93      =3  #define clr_T1M     CKCON   &= ~SET_BIT4
  94      =3  #define clr_T0M     CKCON   &= ~SET_BIT3
  95      =3  #define clr_CLOEN   CKCON   &= ~SET_BIT1
  96      =3  
  97      =3  //**** WKCON  8FH ****
  98      =3  #define set_WKTCK   WKCON   |= SET_BIT5
  99      =3  #define set_WKTF    WKCON   |= SET_BIT4
 100      =3  #define set_WKTR    WKCON   |= SET_BIT3
 101      =3  #define set_WKPS2   WKCON   |= SET_BIT2
 102      =3  #define set_WKPS1   WKCON   |= SET_BIT1
 103      =3  #define set_WKPS0   WKCON   |= SET_BIT0
 104      =3                              
 105      =3  #define clr_WKTCK   WKCON   &= ~SET_BIT5
 106      =3  #define clr_WKTF    WKCON   &= ~SET_BIT4
 107      =3  #define clr_WKTR    WKCON   &= ~SET_BIT3
 108      =3  #define clr_WKPS2   WKCON   &= ~SET_BIT2
 109      =3  #define clr_WKPS1   WKCON   &= ~SET_BIT1
 110      =3  #define clr_WKPS0   WKCON   &= ~SET_BIT0
 111      =3  
 112      =3  /**** P1    90H *****/
 113      =3  #define set_P10     P10   =   1
 114      =3  #define set_P11     P11   =   1
 115      =3  #define set_P12     P12   =   1
 116      =3  #define set_P13     P13   =   1
 117      =3  #define set_P14     P14   =   1
 118      =3  #define set_P15     P15   =   1
 119      =3  #define set_P16     P16   =   1
 120      =3  #define set_P17     P17   =   1
 121      =3  
 122      =3  #define clr_P10     P10   =   0
 123      =3  #define clr_P11     P11   =   0
 124      =3  #define clr_P12     P12   =   0
 125      =3  #define clr_P13     P13   =   0
 126      =3  #define clr_P14     P14   =   0
 127      =3  #define clr_P15     P15   =   0
 128      =3  #define clr_P16     P16   =   0
 129      =3  #define clr_P17     P17   =   0
 130      =3  
 131      =3  //****SFRS    91H ****
 132      =3  #define set_SFRPAGE  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=SET_BIT0;EA=BIT_TMP
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 12  

 133      =3  #define clr_SFRPAGE  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS&=~SET_BIT0;EA=BIT_TMP
 134      =3  
 135      =3  //****CAPCON0 92H ****
 136      =3  #define set_CAPEN2  CAPCON0 |= SET_BIT6
 137      =3  #define set_CAPEN1  CAPCON0 |= SET_BIT5
 138      =3  #define set_CAPEN0  CAPCON0 |= SET_BIT4
 139      =3  #define set_CAPF2   CAPCON0 |= SET_BIT2
 140      =3  #define set_CAPF1   CAPCON0 |= SET_BIT1
 141      =3  #define set_CAPF0   CAPCON0 |= SET_BIT0
 142      =3  
 143      =3  #define clr_CAPEN2  CAPCON0 &= ~SET_BIT6
 144      =3  #define clr_CAPEN1  CAPCON0 &= ~SET_BIT5
 145      =3  #define clr_CAPEN0  CAPCON0 &= ~SET_BIT4
 146      =3  #define clr_CAPF2   CAPCON0 &= ~SET_BIT2
 147      =3  #define clr_CAPF1   CAPCON0 &= ~SET_BIT1
 148      =3  #define clr_CAPF0   CAPCON0 &= ~SET_BIT0
 149      =3  
 150      =3  //**** CAPCON1  93H ****
 151      =3  #define set_CAP2LS1 CAPCON1 |= SET_BIT5
 152      =3  #define set_CAP2LS0 CAPCON1 |= SET_BIT4
 153      =3  #define set_CAP1LS1 CAPCON1 |= SET_BIT3
 154      =3  #define set_CAP1LS0 CAPCON1 |= SET_BIT2
 155      =3  #define set_CAP0LS1 CAPCON1 |= SET_BIT1
 156      =3  #define set_CAP0LS0 CAPCON1 |= SET_BIT0
 157      =3  
 158      =3  #define clr_CAP2LS1 CAPCON1 &= ~SET_BIT5
 159      =3  #define clr_CAP2LS0 CAPCON1 &= ~SET_BIT4
 160      =3  #define clr_CAP1LS1 CAPCON1 &= ~SET_BIT3
 161      =3  #define clr_CAP1LS0 CAPCON1 &= ~SET_BIT2
 162      =3  #define clr_CAP0LS1 CAPCON1 &= ~SET_BIT1
 163      =3  #define clr_CAP0LS0 CAPCON1 &= ~SET_BIT0
 164      =3  
 165      =3  //**** CAPCON2    94H ****
 166      =3  #define set_ENF2  CAPCON2   |= SET_BIT6
 167      =3  #define set_ENF1  CAPCON2   |= SET_BIT5
 168      =3  #define set_ENF0  CAPCON2   |= SET_BIT4
 169      =3                              
 170      =3  #define clr_ENF2  CAPCON2   &= ~SET_BIT6
 171      =3  #define clr_ENF1  CAPCON2   &= ~SET_BIT5
 172      =3  #define clr_ENF0  CAPCON2   &= ~SET_BIT4
 173      =3  
 174      =3  //**** CKDIV    95H ****
 175      =3  
 176      =3  //**** CKSWT    96H ****  TA protect register
 177      =3  #define set_HIRCST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT|=SET_BIT5;EA=BIT_TMP;
 178      =3  #define set_LIRCST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT|=SET_BIT4;EA=BIT_TMP;
 179      =3  #define set_ECLKST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT|=SET_BIT3;EA=BIT_TMP;
 180      =3  #define set_OSC1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT|=SET_BIT2;EA=BIT_TMP;
 181      =3  #define set_OSC0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT|=SET_BIT1;EA=BIT_TMP;
 182      =3  
 183      =3  #define clr_HIRCST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT&=~SET_BIT5;EA=BIT_TMP;
 184      =3  #define clr_LIRCST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT&=~SET_BIT4;EA=BIT_TMP;
 185      =3  #define clr_ECLKST  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT&=~SET_BIT3;EA=BIT_TMP;
 186      =3  #define clr_OSC1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT&=~SET_BIT2;EA=BIT_TMP;
 187      =3  #define clr_OSC0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKSWT&=~SET_BIT1;EA=BIT_TMP;
 188      =3  
 189      =3  //**** CKEN   97H **** TA protect register
 190      =3  #define set_EXTEN1  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN|=SET_BIT7;EA=BIT_TMP;
 191      =3  #define set_EXTEN0  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN|=SET_BIT6;EA=BIT_TMP;
 192      =3  #define set_HIRCEN  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN|=SET_BIT5;EA=BIT_TMP;
 193      =3  #define set_CKSWTF  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN|=SET_BIT0;EA=BIT_TMP;
 194      =3         
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 13  

 195      =3  #define clr_EXTEN1  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN&=~SET_BIT7;EA=BIT_TMP;
 196      =3  #define clr_EXTEN0  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN&=~SET_BIT6;EA=BIT_TMP;
 197      =3  #define clr_HIRCEN  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN&=~SET_BIT5;EA=BIT_TMP;
 198      =3  #define clr_CKSWTF  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN&=~SET_BIT0;EA=BIT_TMP;
 199      =3  
 200      =3  //**** SCON   98H ****
 201      =3  #define set_FE      FE    = 1
 202      =3  #define set_SM1     SM1   = 1
 203      =3  #define set_SM2     SM2   = 1
 204      =3  #define set_REN     REN   = 1
 205      =3  #define set_TB8     TB8   = 1
 206      =3  #define set_RB8     RB8   = 1
 207      =3  #define set_TI      TI    = 1
 208      =3  #define set_RI      RI    = 1
 209      =3  
 210      =3  #define clr_FE      FE    = 0
 211      =3  #define clr_SM1     SM1   = 0
 212      =3  #define clr_SM2     SM2   = 0
 213      =3  #define clr_REN     REN   = 0
 214      =3  #define clr_TB8     TB8   = 0
 215      =3  #define clr_RB8     RB8   = 0
 216      =3  #define clr_TI      TI    = 0
 217      =3  #define clr_RI      RI    = 0
 218      =3  
 219      =3  //**** SBUF   99H ****
 220      =3  //**** SBUF_1 9AH ****
 221      =3  
 222      =3  //**** EIE    9BH ****                      
 223      =3  #define set_ET2     EIE     |= SET_BIT7
 224      =3  #define set_ESPI    EIE     |= SET_BIT6
 225      =3  #define set_EFB     EIE     |= SET_BIT5
 226      =3  #define set_EWDT    EIE     |= SET_BIT4
 227      =3  #define set_EPWM    EIE     |= SET_BIT3
 228      =3  #define set_ECAP    EIE     |= SET_BIT2
 229      =3  #define set_EPI     EIE     |= SET_BIT1
 230      =3  #define set_EI2C    EIE     |= SET_BIT0
 231      =3                              
 232      =3  #define clr_ET2     EIE     &= ~SET_BIT7
 233      =3  #define clr_ESPI    EIE     &= ~SET_BIT6
 234      =3  #define clr_EFB     EIE     &= ~SET_BIT5
 235      =3  #define clr_EWDT    EIE     &= ~SET_BIT4
 236      =3  #define clr_EPWM    EIE     &= ~SET_BIT3
 237      =3  #define clr_ECAP    EIE     &= ~SET_BIT2
 238      =3  #define clr_EPI     EIE     &= ~SET_BIT1
 239      =3  #define clr_EI2C    EIE     &= ~SET_BIT0
 240      =3  
 241      =3  //**** EIE1   9CH ****                      
 242      =3  #define set_EWKT    EIE1    |= SET_BIT2
 243      =3  #define set_ET3     EIE1    |= SET_BIT1
 244      =3  #define set_ES_1    EIE1    |= SET_BIT0
 245      =3                              
 246      =3  #define clr_EWKT    EIE1    &= ~SET_BIT2
 247      =3  #define clr_ET3     EIE1    &= ~SET_BIT1
 248      =3  #define clr_ES_1    EIE1    &= ~SET_BIT0
 249      =3                              
 250      =3  //**** CHPCON   9DH ****  TA protect register
 251      =3  #define set_SWRST   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT7 ;EA=BIT_TMP
 252      =3  #define set_IAPFF   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT6 ;EA=BIT_TMP
 253      =3  #define set_BS      BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT1 ;EA=BIT_TMP
 254      =3  #define set_IAPEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT0 ;EA=BIT_TMP
 255      =3         
 256      =3  #define clr_SWRST   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT7;EA=BIT_TMP
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 14  

 257      =3  #define clr_IAPFF   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT6;EA=BIT_TMP
 258      =3  #define clr_BS      BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT1;EA=BIT_TMP
 259      =3  #define clr_IAPEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT0;EA=BIT_TMP
 260      =3  
 261      =3  //**** P2   A0H ****
 262      =3  
 263      =3  //**** AUXR1  A2H ****
 264      =3  #define set_SWRF    AUXR1   |= SET_BIT7
 265      =3  #define set_RSTPINF AUXR1   |= SET_BIT6
 266      =3  #define set_HARDF   AUXR1   |= SET_BIT5
 267      =3  #define set_GF2     AUXR1   |= SET_BIT3
 268      =3  #define set_UART0PX AUXR1   |= SET_BIT2
 269      =3  #define set_DPS     AUXR1   |= SET_BIT0
 270      =3                              
 271      =3  #define clr_SWRF    AUXR1   &= ~SET_BIT7
 272      =3  #define clr_RSTPINF AUXR1   &= ~SET_BIT6
 273      =3  #define clr_HARDF   AUXR1   &= ~SET_BIT5
 274      =3  #define clr_GF2     AUXR1   &= ~SET_BIT3
 275      =3  #define clr_UART0PX AUXR1   &= ~SET_BIT2
 276      =3  #define clr_DPS     AUXR1   &= ~SET_BIT0
 277      =3  
 278      =3  //**** BODCON0  A3H ****  TA protect register
 279      =3  #define set_BODEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT7;EA=BIT_TMP
 280      =3  #define set_BOV1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT5;EA=BIT_TMP
 281      =3  #define set_BOV0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT4;EA=BIT_TMP
 282      =3  #define set_BOF     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT3;EA=BIT_TMP
 283      =3  #define set_BORST   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT2;EA=BIT_TMP
 284      =3  #define set_BORF    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT1;EA=BIT_TMP
 285      =3  #define set_BOS     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0|=SET_BIT0;EA=BIT_TMP
 286      =3  
 287      =3  #define clr_BODEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT7;EA=BIT_TMP
 288      =3  #define clr_BOV2    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT6;EA=BIT_TMP
 289      =3  #define clr_BOV1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT5;EA=BIT_TMP
 290      =3  #define clr_BOV0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT4;EA=BIT_TMP
 291      =3  #define clr_BOF     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT3;EA=BIT_TMP
 292      =3  #define clr_BORST   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT2;EA=BIT_TMP
 293      =3  #define clr_BORF    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT1;EA=BIT_TMP
 294      =3  #define clr_BOS     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON0&=~SET_BIT0;EA=BIT_TMP
 295      =3  
 296      =3  //**** IAPTRG   A4H ****  TA protect register
 297      =3  #define set_IAPGO   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG|=SET_BIT0 ;EA=BIT_TMP
 298      =3  #define clr_IAPGO   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG&=~SET_BIT0;EA=BIT_TMP
 299      =3  
 300      =3  //**** IAPUEN   A5H **** TA protect register
 301      =3  #define set_CFUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN|=SET_BIT2;EA=BIT_TMP
 302      =3  #define set_LDUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN|=SET_BIT1;EA=BIT_TMP
 303      =3  #define set_APUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN|=SET_BIT0;EA=BIT_TMP
 304      =3  
 305      =3  #define clr_CFUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN&=~SET_BIT2;EA=BIT_TMP
 306      =3  #define clr_LDUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN&=~SET_BIT1;EA=BIT_TMP
 307      =3  #define clr_APUEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPUEN&=~SET_BIT0;EA=BIT_TMP
 308      =3  
 309      =3  //**** IAPAL  A6H ****
 310      =3  //**** IAPAH  A7H ****
 311      =3  
 312      =3  //**** IE     A8H ****
 313      =3  #define set_EA      EA       = 1
 314      =3  #define set_EADC    EADC     = 1
 315      =3  #define set_EBOD    EBOD     = 1
 316      =3  #define set_ES      ES       = 1
 317      =3  #define set_ET1     ET1      = 1
 318      =3  #define set_EX1     EX1      = 1
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 15  

 319      =3  #define set_ET0     ET0      = 1
 320      =3  #define set_EX0     EX0      = 1
 321      =3  
 322      =3  #define clr_EA      EA       = 0
 323      =3  #define clr_EADC    EADC     = 0
 324      =3  #define clr_EBOD    EBOD     = 0
 325      =3  #define clr_ES      ES       = 0
 326      =3  #define clr_ET1     ET1      = 0
 327      =3  #define clr_EX1     EX1      = 0
 328      =3  #define clr_ET0     ET0      = 0
 329      =3  #define clr_EX0     EX0      = 0
 330      =3  
 331      =3  //**** SADDR    A9H ****
 332      =3  
 333      =3  //**** WDCON    AAH **** TA protect register
 334      =3  #define set_WDTR    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT7;EA=BIT_TMP;
 335      =3  #define set_WDCLR   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT6;EA=BIT_TMP;
 336      =3  #define set_WDTF    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT5;EA=BIT_TMP;
 337      =3  #define set_WIDPD   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT4;EA=BIT_TMP;
 338      =3  #define set_WDTRF   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT3;EA=BIT_TMP;
 339      =3  #define set_WPS2    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT2;EA=BIT_TMP;
 340      =3  #define set_WPS1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT1;EA=BIT_TMP;
 341      =3  #define set_WPS0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON|=SET_BIT0;EA=BIT_TMP;
 342      =3          
 343      =3  #define clr_WDTEN   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT7;EA=BIT_TMP;
 344      =3  #define clr_WDCLR   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT6;EA=BIT_TMP;
 345      =3  #define clr_WDTF    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT5;EA=BIT_TMP;
 346      =3  #define clr_WDTRF   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT3;EA=BIT_TMP;
 347      =3  #define clr_WPS2    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT2;EA=BIT_TMP;
 348      =3  #define clr_WPS1    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT1;EA=BIT_TMP;
 349      =3  #define clr_WPS0    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;WDCON&=~SET_BIT0;EA=BIT_TMP;
 350      =3  
 351      =3  //**** BODCON1 ABH **** TA protect register
 352      =3  #define set_LPBOD1  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1|=SET_BIT2 ;EA=BIT_TMP;
 353      =3  #define set_LPBOD0  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1|=SET_BIT1 ;EA=BIT_TMP;
 354      =3  #define set_BODFLT  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1|=SET_BIT0 ;EA=BIT_TMP;
 355      =3          
 356      =3  #define clr_LPBOD1  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1&=~SET_BIT2;EA=BIT_TMP;
 357      =3  #define clr_LPBOD0  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1&=~SET_BIT1;EA=BIT_TMP;
 358      =3  #define clr_BODFLT  BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;BODCON1&=~SET_BIT0;EA=BIT_TMP;
 359      =3  
 360      =3  
 361      =3  //**** P3M1   ACH PAGE0 ****
 362      =3  #define set_P3M1_0  P3M1    |= SET_BIT0
 363      =3  #define clr_P3M1_0  P3M1    &= ~SET_BIT0
 364      =3  
 365      =3  //**** P3S    ACH PAGE1 **** SFRS must set as 1 to modify this register  
 366      =3  #define set_P3S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P3S|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 367      =3  #define clr_P3S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P3S&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 368      =3  
 369      =3  //**** P3M2   ADH PAGE0 ****
 370      =3  #define set_P3M2_0  P3M2    |= SET_BIT0
 371      =3  #define clr_P3M2_0  P3M2    &= ~SET_BIT0
 372      =3  
 373      =3  //**** P3SR   ADH PAGE1 **** SFRS must set as 1 to modify this register  
 374      =3  #define set_P3SR_0  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P3SR|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 375      =3  #define clr_P3SR_0  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P3SR&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 376      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 16  

 377      =3  //**** IAPFD  AEH ****
 378      =3  
 379      =3  //**** IAPCN  AFH ****
 380      =3  #define set_FOEN    IAPN    |= SET_BIT5
 381      =3  #define set_FCEN    IAPN    |= SET_BIT4
 382      =3  #define set_FCTRL3  IAPN    |= SET_BIT3
 383      =3  #define set_FCTRL2  IAPN    |= SET_BIT2
 384      =3  #define set_FCTRL1  IAPN    |= SET_BIT1
 385      =3  #define set_FCTRL0  IAPN    |= SET_BIT0
 386      =3                              
 387      =3  #define clr_FOEN    IAPN    &= ~SET_BIT5
 388      =3  #define clr_FCEN    IAPN    &= ~SET_BIT4
 389      =3  #define clr_FCTRL3  IAPN    &= ~SET_BIT3
 390      =3  #define clr_FCTRL2  IAPN    &= ~SET_BIT2
 391      =3  #define clr_FCTRL1  IAPN    &= ~SET_BIT1
 392      =3  #define clr_FCTRL0  IAPN    &= ~SET_BIT0
 393      =3  
 394      =3  //**** P3   B0H ****
 395      =3  #define set_P30     P30      = 1
 396      =3  #define clr_P30     P30      = 0
 397      =3  
 398      =3  //**** P0M1 B1H PAGE0 ****
 399      =3  #define set_P0M1_7  P0M1    |= SET_BIT7
 400      =3  #define set_P0M1_6  P0M1    |= SET_BIT6
 401      =3  #define set_P0M1_5  P0M1    |= SET_BIT5 
 402      =3  #define set_P0M1_4  P0M1    |= SET_BIT4
 403      =3  #define set_P0M1_3  P0M1    |= SET_BIT3
 404      =3  #define set_P0M1_2  P0M1    |= SET_BIT2
 405      =3  #define set_P0M1_1  P0M1    |= SET_BIT1
 406      =3  #define set_P0M1_0  P0M1    |= SET_BIT0
 407      =3  
 408      =3  #define clr_P0M1_7  P0M1    &= ~SET_BIT7
 409      =3  #define clr_P0M1_6  P0M1    &= ~SET_BIT6
 410      =3  #define clr_P0M1_5  P0M1    &= ~SET_BIT5
 411      =3  #define clr_P0M1_4  P0M1    &= ~SET_BIT4
 412      =3  #define clr_P0M1_3  P0M1    &= ~SET_BIT3
 413      =3  #define clr_P0M1_2  P0M1    &= ~SET_BIT2
 414      =3  #define clr_P0M1_1  P0M1    &= ~SET_BIT1
 415      =3  #define clr_P0M1_0  P0M1    &= ~SET_BIT0
 416      =3  
 417      =3  //**** P0S  B2H PAGE1 **** SFRS must set as 1 to modify this register  
 418      =3  #define set_P0S_7   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 419      =3  #define set_P0S_6   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 420      =3  #define set_P0S_5   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 421      =3  #define set_P0S_4   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 422      =3  #define set_P0S_3   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 423      =3  #define set_P0S_2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 424      =3  #define set_P0S_1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 425      =3  #define set_P0S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 426      =3  
 427      =3  #define clr_P0S_7   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 428      =3  #define clr_P0S_6   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 17  

 429      =3  #define clr_P0S_5   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 430      =3  #define clr_P0S_4   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 431      =3  #define clr_P0S_3   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 432      =3  #define clr_P0S_2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 433      =3  #define clr_P0S_1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 434      =3  #define clr_P0S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0S&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 435      =3  
 436      =3  //**** P0M2   B2H PAGE0 ****
 437      =3  #define set_P0M2_7  P0M2    |= SET_BIT7
 438      =3  #define set_P0M2_6  P0M2    |= SET_BIT6
 439      =3  #define set_P0M2_5  P0M2    |= SET_BIT5 
 440      =3  #define set_P0M2_4  P0M2    |= SET_BIT4
 441      =3  #define set_P0M2_3  P0M2    |= SET_BIT3
 442      =3  #define set_P0M2_2  P0M2    |= SET_BIT2
 443      =3  #define set_P0M2_1  P0M2    |= SET_BIT1
 444      =3  #define set_P0M2_0  P0M2    |= SET_BIT0
 445      =3  
 446      =3  #define clr_P0M2_7  P0M2    &= ~SET_BIT7
 447      =3  #define clr_P0M2_6  P0M2    &= ~SET_BIT6
 448      =3  #define clr_P0M2_5  P0M2    &= ~SET_BIT5
 449      =3  #define clr_P0M2_4  P0M2    &= ~SET_BIT4
 450      =3  #define clr_P0M2_3  P0M2    &= ~SET_BIT3
 451      =3  #define clr_P0M2_2  P0M2    &= ~SET_BIT2
 452      =3  #define clr_P0M2_1  P0M2    &= ~SET_BIT1
 453      =3  #define clr_P0M2_0  P0M2    &= ~SET_BIT0
 454      =3  
 455      =3  
 456      =3  //**** P0SR   B0H PAGE1 **** SFRS must set as 1 to modify this register  
 457      =3  #define set_P0SR_7  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 458      =3  #define set_P0SR_6  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 459      =3  #define set_P0SR_5  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 460      =3  #define set_P0SR_4  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 461      =3  #define set_P0SR_3  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 462      =3  #define set_P0SR_2  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 463      =3  #define set_P0SR_1  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 464      =3  #define set_P0SR_0  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 465      =3  
 466      =3  #define clr_P0SR_7  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 467      =3  #define clr_P0SR_6  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 468      =3  #define clr_P0SR_5  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 469      =3  #define clr_P0SR_4  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 470      =3  #define clr_P0SR_3  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 471      =3  #define clr_P0SR_2  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 18  

             -TMP
 472      =3  #define clr_P0SR_1  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 473      =3  #define clr_P0SR_0  BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P0SR&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 474      =3  
 475      =3  
 476      =3  //**** P1M1 B3H PAGE0 ****
 477      =3  #define set_P1M1_7  P1M1  |= SET_BIT7
 478      =3  #define set_P1M1_6  P1M1  |= SET_BIT6
 479      =3  #define set_P1M1_5  P1M1  |= SET_BIT5 
 480      =3  #define set_P1M1_4  P1M1  |= SET_BIT4
 481      =3  #define set_P1M1_3  P1M1  |= SET_BIT3
 482      =3  #define set_P1M1_2  P1M1  |= SET_BIT2
 483      =3  #define set_P1M1_1  P1M1  |= SET_BIT1
 484      =3  #define set_P1M1_0  P1M1  |= SET_BIT0
 485      =3  
 486      =3  #define clr_P1M1_7  P1M1  &= ~SET_BIT7
 487      =3  #define clr_P1M1_6  P1M1  &= ~SET_BIT6
 488      =3  #define clr_P1M1_5  P1M1  &= ~SET_BIT5
 489      =3  #define clr_P1M1_4  P1M1  &= ~SET_BIT4
 490      =3  #define clr_P1M1_3  P1M1  &= ~SET_BIT3
 491      =3  #define clr_P1M1_2  P1M1  &= ~SET_BIT2
 492      =3  #define clr_P1M1_1  P1M1  &= ~SET_BIT1
 493      =3  #define clr_P1M1_0  P1M1  &= ~SET_BIT0
 494      =3  
 495      =3  //**** P1S B3H PAGE1 **** SFRS must set as 1 to modify this register  
 496      =3  #define set_P1S_7   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TMP
 497      =3  #define set_P1S_6   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TMP
 498      =3  #define set_P1S_5   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TMP
 499      =3  #define set_P1S_4   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TMP
 500      =3  #define set_P1S_3   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TMP
 501      =3  #define set_P1S_2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 502      =3  #define set_P1S_1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 503      =3  #define set_P1S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 504      =3  
 505      =3  #define clr_P1S_7   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 506      =3  #define clr_P1S_6   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 507      =3  #define clr_P1S_5   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 508      =3  #define clr_P1S_4   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 509      =3  #define clr_P1S_3   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_TM
             -P
 510      =3  #define clr_P1S_2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 511      =3  #define clr_P1S_1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 512      =3  #define clr_P1S_0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1S&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 513      =3  
 514      =3  //**** P1M2   B4H PAGE0 ****                      
 515      =3  #define set_P12UP   P1M2    |= SET_BIT2
 516      =3  #define set_P1M2_1  P1M2    |= SET_BIT1
 517      =3  #define set_P1M2_0  P1M2    |= SET_BIT0
 518      =3                              
 519      =3  #define clr_P12UP   P1M2    &= ~SET_BIT2
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 19  

 520      =3  #define clr_P1M2_1  P1M2    &= ~SET_BIT1
 521      =3  #define clr_P1M2_0  P1M2    &= ~SET_BIT0
 522      =3  
 523      =3  //**** P1SR   B4H PAGE1 **** SFRS must set as 1 to modify this register  
 524      =3  #define set_P1SR_7    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 525      =3  #define set_P1SR_6    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 526      =3  #define set_P1SR_5    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 527      =3  #define set_P1SR_4    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 528      =3  #define set_P1SR_3    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 529      =3  #define set_P1SR_2    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 530      =3  #define set_P1SR_1    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 531      =3  #define set_P1SR_0    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
 532      =3  
 533      =3  #define clr_P1SR_7    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT7;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 534      =3  #define clr_P1SR_6    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT6;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 535      =3  #define clr_P1SR_5    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 536      =3  #define clr_P1SR_4    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 537      =3  #define clr_P1SR_3    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 538      =3  #define clr_P1SR_2    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 539      =3  #define clr_P1SR_1    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 540      =3  #define clr_P1SR_0    BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;P1SR&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
 541      =3  
 542      =3  
 543      =3  //**** P2S    B5H ****
 544      =3  #define set_P2S_0   P2S     |= SET_BIT0
 545      =3  #define clr_P2S_0   P2S     &= ~SET_BIT0
 546      =3  
 547      =3  //**** IPH    B7H PAGE0 ****                    
 548      =3  #define set_PADCH   IPH   |= SET_BIT6
 549      =3  #define set_PBODH   IPH   |= SET_BIT5
 550      =3  #define set_PSH     IPH   |= SET_BIT4
 551      =3  #define set_PT1H    IPH   |= SET_BIT3
 552      =3  #define set_PX11    IPH   |= SET_BIT2
 553      =3  #define set_PT0H    IPH   |= SET_BIT1
 554      =3  #define set_PX0H    IPH   |= SET_BIT0
 555      =3                              
 556      =3  #define clr_PADCH   IPH   &= ~SET_BIT6
 557      =3  #define clr_PBODH   IPH   &= ~SET_BIT5
 558      =3  #define clr_PSH     IPH   &= ~SET_BIT4
 559      =3  #define clr_PT1H    IPH   &= ~SET_BIT3
 560      =3  #define clr_PX11    IPH   &= ~SET_BIT2
 561      =3  #define clr_PT0H    IPH   &= ~SET_BIT1
 562      =3  #define clr_PX0H    IPH   &= ~SET_BIT0
 563      =3  
 564      =3  //**** PWMINTC B7H PAGE1 **** SFRS must set as 1 to modify this register  
 565      =3  #define set_INTTYP1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=B
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 20  

             -IT_TMP
 566      =3  #define set_INTTYP0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA=B
             -IT_TMP
 567      =3  #define set_INTSEL2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=B
             -IT_TMP
 568      =3  #define set_INTSEL1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=B
             -IT_TMP
 569      =3  #define set_INTSEL0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=B
             -IT_TMP
 570      =3  
 571      =3  #define clr_INTTYP1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA
             -=BIT_TMP
 572      =3  #define clr_INTTYP0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=~SET_BIT4;TA=0xAA;TA=0x55;SFRS=0x00;EA
             -=BIT_TMP
 573      =3  #define clr_INTSEL2   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=
             -BIT_TMP
 574      =3  #define clr_INTSEL1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=
             -BIT_TMP
 575      =3  #define clr_INTSEL0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=
             -BIT_TMP
 576      =3  
 577      =3  //**** IP   B8H ****
 578      =3  #define set_PADC    PADC     = 1
 579      =3  #define set_PBOD    PBOD     = 1
 580      =3  #define set_PS      PS       = 1
 581      =3  #define set_PT1     PT1      = 1
 582      =3  #define set_PX1     PX1      = 1
 583      =3  #define set_PT0     PT0      = 1
 584      =3  #define set_PX0     PX0      = 1
 585      =3  
 586      =3  #define clr_PADC    PADC     = 0
 587      =3  #define clr_PBOD    PBOD     = 0
 588      =3  #define clr_PS      PS       = 0
 589      =3  #define clr_PT1     PT1      = 0
 590      =3  #define clr_PX1     PX1      = 0
 591      =3  #define clr_PT0     PT0      = 0
 592      =3  #define clr_PX0     PX0      = 0
 593      =3  
 594      =3  //**** SADEN    B9H ****
 595      =3  //**** SADEN_1  8AH ****
 596      =3  //**** SADDR_1  BBH ****
 597      =3  //**** I2DAT    BCH ****
 598      =3  //**** I2STAT   BDH ****
 599      =3  //**** I2CLK    BEH ****
 600      =3  
 601      =3  //**** I2TOC    BFH ****
 602      =3  #define set_I2TOCEN   I2TOC   |= SET_BIT2
 603      =3  #define set_DIV       I2TOC   |= SET_BIT1
 604      =3  #define set_I2TOF     I2TOC   |= SET_BIT0
 605      =3  
 606      =3  #define clr_I2TOCEN   I2TOC   &= ~SET_BIT2
 607      =3  #define clr_DIV       I2TOC   &= ~SET_BIT1
 608      =3  #define clr_I2TOF     I2TOC   &= ~SET_BIT0
 609      =3  
 610      =3  //**** I2CON  C0H **** 
 611      =3  #define set_I2CEN     I2CEN   = 1
 612      =3  #define set_STA       STA     = 1
 613      =3  #define set_STO       STO     = 1
 614      =3  #define set_SI        SI      = 1
 615      =3  #define set_AA        AA      = 1
 616      =3  #define set_I2CPX     I2CPX   = 1
 617      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 21  

 618      =3  #define clr_I2CEN     I2CEN   = 0
 619      =3  #define clr_STA       STA     = 0
 620      =3  #define clr_STO       STO     = 0
 621      =3  #define clr_SI        SI      = 0
 622      =3  #define clr_AA        AA      = 0
 623      =3  #define clr_I2CPX     I2CPX   = 0 
 624      =3  
 625      =3  //**** I2ADDR   C1H ****
 626      =3  #define set_GC      I2ADDR  |= SET_BIT0
 627      =3  #define clr_GC      I2ADDR  &= ~SET_BIT0
 628      =3  
 629      =3  //**** ADCRL    C2H ****
 630      =3  //**** ADCRH    C3H ****
 631      =3  
 632      =3  //**** T3CON    C4H PAGE0 ****                     
 633      =3  #define set_SMOD_1  T3CON   |= SET_BIT7
 634      =3  #define set_SMOD0_1 T3CON   |= SET_BIT6
 635      =3  #define set_BRCK    T3CON   |= SET_BIT5
 636      =3  #define set_TF3     T3CON   |= SET_BIT4
 637      =3  #define set_TR3     T3CON   |= SET_BIT3
 638      =3  #define set_T3PS2   T3CON   |= SET_BIT2
 639      =3  #define set_T3PS1   T3CON   |= SET_BIT1
 640      =3  #define set_T3PS0   T3CON   |= SET_BIT0
 641      =3                              
 642      =3  #define clr_SMOD_1  T3CON   &= ~SET_BIT7
 643      =3  #define clr_SMOD0_1 T3CON   &= ~SET_BIT6
 644      =3  #define clr_BRCK    T3CON   &= ~SET_BIT5
 645      =3  #define clr_TF3     T3CON   &= ~SET_BIT4
 646      =3  #define clr_TR3     T3CON   &= ~SET_BIT3
 647      =3  #define clr_T3PS2   T3CON   &= ~SET_BIT2
 648      =3  #define clr_T3PS1   T3CON   &= ~SET_BIT1
 649      =3  #define clr_T3PS0   T3CON   &= ~SET_BIT0
 650      =3  
 651      =3  //**** PWM4H  C4H PAGE1 **** SFRS must set as 1 to modify this register  
 652      =3  //**** RL3    C5H PAGE0 ****
 653      =3  //**** PWM5H  C5H PAGE1 **** SFRS must set as 1 to modify this register  
 654      =3  //**** RH3    C6H PAGE0 ****
 655      =3  
 656      =3  //**** PIOCON1 C6H PAGE1 **** SFRS must set as 1 to modify this register  
 657      =3  #define set_PIO15   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1|=SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT
             -_TMP
 658      =3  #define set_PIO13   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1|=SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 659      =3  #define set_PIO12   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1|=SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 660      =3  #define set_PIO11   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 661      =3  
 662      =3  #define clr_PIO15   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1&=~SET_BIT5;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 663      =3  #define clr_PIO13   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1&=~SET_BIT3;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 664      =3  #define clr_PIO12   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1&=~SET_BIT2;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 665      =3  #define clr_PIO11   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PIOCON1&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BI
             -T_TMP
 666      =3  
 667      =3  //**** T2CON  C8H ****
 668      =3  #define set_TF2     TF2      = 1
 669      =3  #define set_TR2     TR2      = 1
 670      =3  #define set_CMRL2   CMRL2    = 1
 671      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 22  

 672      =3  #define clr_TF2     TF2      = 0
 673      =3  #define clr_TR2     TR2      = 0
 674      =3  #define clr_CMRL2   CMRL2    = 0
 675      =3  
 676      =3  //**** T2MOD  C9H ****                     
 677      =3  #define set_LDEN    T2MOD   |= SET_BIT7
 678      =3  #define set_T2DIV2  T2MOD   |= SET_BIT6
 679      =3  #define set_T2DIV1  T2MOD   |= SET_BIT5
 680      =3  #define set_T2DIV0  T2MOD   |= SET_BIT4
 681      =3  #define set_CAPCR   T2MOD   |= SET_BIT3
 682      =3  #define set_CMPCR   T2MOD   |= SET_BIT2
 683      =3  #define set_LDTS1   T2MOD   |= SET_BIT1
 684      =3  #define set_LDTS0   T2MOD   |= SET_BIT0
 685      =3                              
 686      =3  #define clr_LDEN    T2MOD   &= ~SET_BIT7
 687      =3  #define clr_T2DIV2  T2MOD   &= ~SET_BIT6
 688      =3  #define clr_T2DIV1  T2MOD   &= ~SET_BIT5
 689      =3  #define clr_T2DIV0  T2MOD   &= ~SET_BIT4
 690      =3  #define clr_CAPCR   T2MOD   &= ~SET_BIT3
 691      =3  #define clr_CMPCR   T2MOD   &= ~SET_BIT2
 692      =3  #define clr_LDTS1   T2MOD   &= ~SET_BIT1
 693      =3  #define clr_LDTS0   T2MOD   &= ~SET_BIT0
 694      =3  
 695      =3  //**** RCMP2H CAH ****
 696      =3  //**** RCMP2L CBH ****
 697      =3  //**** TL2    CCH PAGE0 ****
 698      =3  //**** PWM4L  CCH PAGE1 **** SFRS must set as 1 to modify this register  
 699      =3  //**** TH2    CDH PAGE0 ****
 700      =3  //**** PWM5L  CDH PAGE1 **** SFRS must set as 1 to modify this register  
 701      =3  //**** ADCMPL CEH **** 
 702      =3  //**** ADCMPH CFH ****
 703      =3  
 704      =3  /****  PSW    D0H ****/
 705      =3  #define set_CY    CY  = 1
 706      =3  #define set_AC    AC  = 1
 707      =3  #define set_F0    F0  = 1 
 708      =3  #define set_RS1   RS1 = 1
 709      =3  #define set_RS0   RS0 = 1
 710      =3  #define set_OV    OV  = 1
 711      =3  #define set_P     P   = 1
 712      =3  
 713      =3  #define clr_CY    CY  = 0
 714      =3  #define clr_AC    AC  = 0
 715      =3  #define clr_F0    F0  = 0 
 716      =3  #define clr_RS1   RS1 = 0
 717      =3  #define clr_RS0   RS0 = 0
 718      =3  #define clr_OV    OV  = 0
 719      =3  #define clr_P     P   = 0
 720      =3  
 721      =3  //**** PWMPH    D1H ****
 722      =3  //**** PWM0H    D2H ****
 723      =3  //**** PWM1H    D3H ****
 724      =3  //**** PWM2H    D4H ****
 725      =3  //**** PWM3H    D5H ****
 726      =3  
 727      =3  //**** PNP      D6H ****
 728      =3  #define set_PNP5    PNP     |= SET_BIT5
 729      =3  #define set_PNP4    PNP     |= SET_BIT4
 730      =3  #define set_PNP3    PNP     |= SET_BIT3
 731      =3  #define set_PNP2    PNP     |= SET_BIT2
 732      =3  #define set_PNP1    PNP     |= SET_BIT1
 733      =3  #define set_PNP0    PNP     |= SET_BIT0
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 23  

 734      =3  
 735      =3  #define clr_PNP5    PNP     &= ~SET_BIT5
 736      =3  #define clr_PNP4    PNP     &= ~SET_BIT4
 737      =3  #define clr_PNP3    PNP     &= ~SET_BIT3
 738      =3  #define clr_PNP2    PNP     &= ~SET_BIT2
 739      =3  #define clr_PNP1    PNP     &= ~SET_BIT1
 740      =3  #define clr_PNP0    PNP     &= ~SET_BIT0
 741      =3  
 742      =3  //**** FBD    D7H ****
 743      =3  #define set_FBF     FBD     |= SET_BIT7
 744      =3  #define set_FBINLS  FBD     |= SET_BIT6
 745      =3  #define set_FBD5    FBD     |= SET_BIT5
 746      =3  #define set_FBD4    FBD     |= SET_BIT4
 747      =3  #define set_FBD3    FBD     |= SET_BIT3
 748      =3  #define set_FBD2    FBD     |= SET_BIT2
 749      =3  #define set_FBD1    FBD     |= SET_BIT1
 750      =3  #define set_FBD0    FBD     |= SET_BIT0
 751      =3  
 752      =3  #define clr_FBF     FBD     &= ~SET_BIT7
 753      =3  #define clr_FBINLS  FBD     &= ~SET_BIT6
 754      =3  #define clr_FBD5    FBD     &= ~SET_BIT5
 755      =3  #define clr_FBD4    FBD     &= ~SET_BIT4
 756      =3  #define clr_FBD3    FBD     &= ~SET_BIT3
 757      =3  #define clr_FBD2    FBD     &= ~SET_BIT2
 758      =3  #define clr_FBD1    FBD     &= ~SET_BIT1
 759      =3  #define clr_FBD0    FBD     &= ~SET_BIT0
 760      =3  
 761      =3  /**** PWMCON0     D8H ****/
 762      =3  #define set_PWMRUN  PWMRUN   = 1
 763      =3  #define set_LOAD    LOAD     = 1
 764      =3  #define set_PWMF    PWMF     = 1
 765      =3  #define set_CLRPWM  CLRPWM   = 1
 766      =3  
 767      =3  #define clr_PWMRUN  PWMRUN   = 0
 768      =3  #define clr_LOAD    LOAD     = 0
 769      =3  #define clr_PWMF    PWMF     = 0 
 770      =3  #define clr_CLRPWM  CLRPWM   = 0
 771      =3  
 772      =3  //**** PWMPL    D9H ****
 773      =3  //**** PWM0L    DAH ****
 774      =3  //**** PWM1L    DBH ****
 775      =3  //**** PWM2L    DCH ****
 776      =3  //**** PWM3L    DDH ****
 777      =3  
 778      =3  //**** PIOCON0  DEH ****
 779      =3  #define set_PIO05    PIOCON0     |= SET_BIT5
 780      =3  #define set_PIO04    PIOCON0     |= SET_BIT4
 781      =3  #define set_PIO03    PIOCON0     |= SET_BIT3
 782      =3  #define set_PIO02    PIOCON0     |= SET_BIT2
 783      =3  #define set_PIO01    PIOCON0     |= SET_BIT1
 784      =3  #define set_PIO00    PIOCON0     |= SET_BIT0
 785      =3  
 786      =3  #define clr_PIO05    PIOCON0     &= ~SET_BIT5
 787      =3  #define clr_PIO04    PIOCON0     &= ~SET_BIT4
 788      =3  #define clr_PIO03    PIOCON0     &= ~SET_BIT3
 789      =3  #define clr_PIO02    PIOCON0     &= ~SET_BIT2
 790      =3  #define clr_PIO01    PIOCON0     &= ~SET_BIT1
 791      =3  #define clr_PIO00    PIOCON0     &= ~SET_BIT0
 792      =3  
 793      =3  //**** PWMCON1  DFH ****
 794      =3  #define set_PWMMOD1   PWMCON1  |= SET_BIT7
 795      =3  #define set_PWMMOD0   PWMCON1  |= SET_BIT6
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 24  

 796      =3  #define set_GP        PWMCON1  |= SET_BIT5
 797      =3  #define set_PWMTYP    PWMCON1  |= SET_BIT4
 798      =3  #define set_FBINEN    PWMCON1  |= SET_BIT3
 799      =3  #define set_PWMDIV2   PWMCON1  |= SET_BIT2 
 800      =3  #define set_PWMDIV1   PWMCON1  |= SET_BIT1
 801      =3  #define set_PWMDIV0   PWMCON1  |= SET_BIT0
 802      =3                              
 803      =3  #define clr_PWMMOD1   PWMCON1  &= ~SET_BIT7
 804      =3  #define clr_PWMMOD0   PWMCON1  &= ~SET_BIT6
 805      =3  #define clr_GP        PWMCON1  &= ~SET_BIT5
 806      =3  #define clr_PWMTYP    PWMCON1  &= ~SET_BIT4
 807      =3  #define clr_FBINEN    PWMCON1  &= ~SET_BIT3
 808      =3  #define clr_PWMDIV2   PWMCON1  &= ~SET_BIT2 
 809      =3  #define clr_PWMDIV1   PWMCON1  &= ~SET_BIT1
 810      =3  #define clr_PWMDIV0   PWMCON1  &= ~SET_BIT0
 811      =3  
 812      =3  //**** ACC  E0H ****
 813      =3  
 814      =3  //**** ADCCON1  E1H ****
 815      =3  #define set_STADCPX ADCCON1  |= SET_BIT6
 816      =3  #define set_ETGTYP1 ADCCON1  |= SET_BIT3
 817      =3  #define set_ETGTYP0 ADCCON1  |= SET_BIT2
 818      =3  #define set_ADCEX   ADCCON1  |= SET_BIT1
 819      =3  #define set_ADCEN   ADCCON1  |= SET_BIT0
 820      =3  
 821      =3  #define clr_STADCPX ADCCON1  &= ~SET_BIT6
 822      =3  #define clr_ETGTYP1 ADCCON1  &= ~SET_BIT3
 823      =3  #define clr_ETGTYP0 ADCCON1  &= ~SET_BIT2
 824      =3  #define clr_ADCEX   ADCCON1  &= ~SET_BIT1
 825      =3  #define clr_ADCEN   ADCCON1  &= ~SET_BIT0
 826      =3  
 827      =3  //**** ADCON2   E2H ****
 828      =3  #define set_ADFBEN  ADCCON2  |= SET_BIT7
 829      =3  #define set_ADCMPOP ADCCON2  |= SET_BIT6
 830      =3  #define set_ADCMPEN ADCCON2  |= SET_BIT5
 831      =3  #define set_ADCMPO  ADCCON2  |= SET_BIT4
 832      =3  
 833      =3  #define clr_ADFBEN  ADCCON2  &= ~SET_BIT7
 834      =3  #define clr_ADCMPOP ADCCON2  &= ~SET_BIT6
 835      =3  #define clr_ADCMPEN ADCCON2  &= ~SET_BIT5
 836      =3  #define clr_ADCMPO  ADCCON2  &= ~SET_BIT4
 837      =3  
 838      =3  //**** ADCDLY   E3H ****
 839      =3  //**** C0L      E4H ****
 840      =3  //**** C0H      E5H ****
 841      =3  //**** C1L      E6H ****
 842      =3  //**** C1H      E7H ****
 843      =3  
 844      =3  //**** ADCCON0  EAH ****
 845      =3  #define set_ADCF    ADCF     = 1
 846      =3  #define set_ADCS    ADCS     = 1
 847      =3  #define set_ETGSEL1 ETGSEL1  = 1
 848      =3  #define set_ETGSEL0 ETGSEL0  = 1
 849      =3  #define set_ADCHS3  ADCHS3   = 1
 850      =3  #define set_ADCHS2  ADCHS2   = 1
 851      =3  #define set_ADCHS1  ADCHS1   = 1
 852      =3  #define set_ADCHS0  ADCHS0   = 1
 853      =3  
 854      =3  #define clr_ADCF    ADCF     = 0
 855      =3  #define clr_ADCS    ADCS     = 0
 856      =3  #define clr_ETGSEL1 ETGSEL1  = 0
 857      =3  #define clr_ETGSEL0 ETGSEL0  = 0
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 25  

 858      =3  #define clr_ADCHS3  ADCHS3   = 0
 859      =3  #define clr_ADCHS2  ADCHS2   = 0
 860      =3  #define clr_ADCHS1  ADCHS1   = 0
 861      =3  #define clr_ADCHS0  ADCHS0   = 0
 862      =3  
 863      =3  //**** PICON  E9H ****
 864      =3  #define set_PIT67   PICON   |= SET_BIT7
 865      =3  #define set_PIT45   PICON   |= SET_BIT6
 866      =3  #define set_PIT3    PICON   |= SET_BIT5
 867      =3  #define set_PIT2    PICON   |= SET_BIT4
 868      =3  #define set_PIT1    PICON   |= SET_BIT3
 869      =3  #define set_PIT0    PICON   |= SET_BIT2
 870      =3  #define set_PIPS1   PICON   |= SET_BIT1
 871      =3  #define set_PIPS0   PICON   |= SET_BIT0
 872      =3                              
 873      =3  #define clr_PIT67   PICON   &= ~SET_BIT7
 874      =3  #define clr_PIT45   PICON   &= ~SET_BIT6
 875      =3  #define clr_PIT3    PICON   &= ~SET_BIT5
 876      =3  #define clr_PIT2    PICON   &= ~SET_BIT4
 877      =3  #define clr_PIT1    PICON   &= ~SET_BIT3
 878      =3  #define clr_PIT0    PICON   &= ~SET_BIT2
 879      =3  #define clr_PIPS1   PICON   &= ~SET_BIT1
 880      =3  #define clr_PIPS0   PICON   &= ~SET_BIT0
 881      =3  
 882      =3  //**** PINEN    EAH **** 
 883      =3  #define set_PINEN7  PINEN   |= SET_BIT7
 884      =3  #define set_PINEN6  PINEN   |= SET_BIT6
 885      =3  #define set_PINEN5  PINEN   |= SET_BIT5
 886      =3  #define set_PINEN4  PINEN   |= SET_BIT4
 887      =3  #define set_PINEN3  PINEN   |= SET_BIT3
 888      =3  #define set_PINEN2  PINEN   |= SET_BIT2
 889      =3  #define set_PINEN1  PINEN   |= SET_BIT1
 890      =3  #define set_PINEN0  PINEN   |= SET_BIT0
 891      =3                              
 892      =3  #define clr_PINEN7  PINEN   &= ~SET_BIT7
 893      =3  #define clr_PINEN6  PINEN   &= ~SET_BIT6
 894      =3  #define clr_PINEN5  PINEN   &= ~SET_BIT5
 895      =3  #define clr_PINEN4  PINEN   &= ~SET_BIT4
 896      =3  #define clr_PINEN3  PINEN   &= ~SET_BIT3
 897      =3  #define clr_PINEN2  PINEN   &= ~SET_BIT2
 898      =3  #define clr_PINEN1  PINEN   &= ~SET_BIT1
 899      =3  #define clr_PINEN0  PINEN   &= ~SET_BIT0
 900      =3                              
 901      =3  //**** PIPEN    EBH ****
 902      =3  #define set_PIPEN7  PIPEN   |= SET_BIT7
 903      =3  #define set_PIPEN6  PIPEN   |= SET_BIT6
 904      =3  #define set_PIPEN5  PIPEN   |= SET_BIT5
 905      =3  #define set_PIPEN4  PIPEN   |= SET_BIT4
 906      =3  #define set_PIPEN3  PIPEN   |= SET_BIT3
 907      =3  #define set_PIPEN2  PIPEN   |= SET_BIT2
 908      =3  #define set_PIPEN1  PIPEN   |= SET_BIT1
 909      =3  #define set_PIPEN0  PIPEN   |= SET_BIT0
 910      =3                              
 911      =3  #define clr_PIPEN7  PIPEN   &= ~SET_BIT7
 912      =3  #define clr_PIPEN6  PIPEN   &= ~SET_BIT6
 913      =3  #define clr_PIPEN5  PIPEN   &= ~SET_BIT5
 914      =3  #define clr_PIPEN4  PIPEN   &= ~SET_BIT4
 915      =3  #define clr_PIPEN3  PIPEN   &= ~SET_BIT3
 916      =3  #define clr_PIPEN2  PIPEN   &= ~SET_BIT2
 917      =3  #define clr_PIPEN1  PIPEN   &= ~SET_BIT1
 918      =3  #define clr_PIPEN0  PIPEN   &= ~SET_BIT0
 919      =3     
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 26  

 920      =3  //**** PIF  ECH ****
 921      =3  #define set_PIF7    PIF     |= SET_BIT7
 922      =3  #define set_PIF6    PIF     |= SET_BIT6
 923      =3  #define set_PIF5    PIF     |= SET_BIT5
 924      =3  #define set_PIF4    PIF     |= SET_BIT4
 925      =3  #define set_PIF3    PIF     |= SET_BIT3
 926      =3  #define set_PIF2    PIF     |= SET_BIT2
 927      =3  #define set_PIF1    PIF     |= SET_BIT1
 928      =3  #define set_PIF0    PIF     |= SET_BIT0
 929      =3  
 930      =3  #define clr_PIF7    PIF     &= ~SET_BIT7
 931      =3  #define clr_PIF6    PIF     &= ~SET_BIT6
 932      =3  #define clr_PIF5    PIF     &= ~SET_BIT5
 933      =3  #define clr_PIF4    PIF     &= ~SET_BIT4
 934      =3  #define clr_PIF3    PIF     &= ~SET_BIT3
 935      =3  #define clr_PIF2    PIF     &= ~SET_BIT2
 936      =3  #define clr_PIF1    PIF     &= ~SET_BIT1
 937      =3  #define clr_PIF0    PIF     &= ~SET_BIT0
 938      =3  
 939      =3  //**** C2L  EDH ****  
 940      =3  //**** C2H  EEH ****
 941      =3  
 942      =3  //**** EIP  EFH ****                      
 943      =3  #define set_PT2     EIP     |= SET_BIT7
 944      =3  #define set_PSPI    EIP     |= SET_BIT6
 945      =3  #define set_PFB     EIP     |= SET_BIT5
 946      =3  #define set_PWDT    EIP     |= SET_BIT4
 947      =3  #define set_PPWM    EIP     |= SET_BIT3
 948      =3  #define set_PCAP    EIP     |= SET_BIT2
 949      =3  #define set_PPI     EIP     |= SET_BIT1
 950      =3  #define set_PI2C    EIP     |= SET_BIT0
 951      =3                              
 952      =3  #define clr_PT2     EIP     &= ~SET_BIT7
 953      =3  #define clr_PSPI    EIP     &= ~SET_BIT6
 954      =3  #define clr_PFB     EIP     &= ~SET_BIT5
 955      =3  #define clr_PWDT    EIP     &= ~SET_BIT4
 956      =3  #define clr_PPWM    EIP     &= ~SET_BIT3
 957      =3  #define clr_PCAP    EIP     &= ~SET_BIT2
 958      =3  #define clr_PPI     EIP     &= ~SET_BIT1
 959      =3  #define clr_PI2C    EIP     &= ~SET_BIT0
 960      =3  
 961      =3  //**** B  F0H ****
 962      =3  
 963      =3  //**** CAPCON3    F1H ****
 964      =3  #define set_CAP13   CAPCON3    |= SET_BIT7
 965      =3  #define set_CAP12   CAPCON3    |= SET_BIT6
 966      =3  #define set_CAP11   CAPCON3    |= SET_BIT5
 967      =3  #define set_CAP10   CAPCON3    |= SET_BIT4
 968      =3  #define set_CAP03   CAPCON3    |= SET_BIT3
 969      =3  #define set_CAP02   CAPCON3    |= SET_BIT2
 970      =3  #define set_CAP01   CAPCON3    |= SET_BIT1
 971      =3  #define set_CAP00   CAPCON3    |= SET_BIT0
 972      =3  
 973      =3  #define clr_CAP13   CAPCON3    &= ~SET_BIT7
 974      =3  #define clr_CAP12   CAPCON3    &= ~SET_BIT6
 975      =3  #define clr_CAP11   CAPCON3    &= ~SET_BIT5
 976      =3  #define clr_CAP10   CAPCON3    &= ~SET_BIT4
 977      =3  #define clr_CAP03   CAPCON3    &= ~SET_BIT3
 978      =3  #define clr_CAP02   CAPCON3    &= ~SET_BIT2
 979      =3  #define clr_CAP01   CAPCON3    &= ~SET_BIT1
 980      =3  #define clr_CAP00   CAPCON3    &= ~SET_BIT0
 981      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 27  

 982      =3  //**** CAPCON4    F2H ****
 983      =3  #define set_CAP23    CAPCON4    |= SET_BIT3
 984      =3  #define set_CAP22    CAPCON4    |= SET_BIT2
 985      =3  #define set_CAP21    CAPCON4    |= SET_BIT1
 986      =3  #define set_CAP20    CAPCON4    |= SET_BIT0
 987      =3  
 988      =3  #define clr_CAP23    CAPCON4    &= ~SET_BIT3
 989      =3  #define clr_CAP22    CAPCON4    &= ~SET_BIT2
 990      =3  #define clr_CAP21    CAPCON4    &= ~SET_BIT1
 991      =3  #define clr_CAP20    CAPCON4    &= ~SET_BIT0
 992      =3  
 993      =3  //**** SPCR   F3H PAGE0 ****
 994      =3  #define set_SSOE    SPCR    |= SET_BIT7
 995      =3  #define set_SPIEN   SPCR    |= SET_BIT6
 996      =3  #define set_LSBFE   SPCR    |= SET_BIT5
 997      =3  #define set_MSTR    SPCR    |= SET_BIT4
 998      =3  #define set_CPOL    SPCR    |= SET_BIT3
 999      =3  #define set_CPHA    SPCR    |= SET_BIT2
1000      =3  #define set_SPR1    SPCR    |= SET_BIT1
1001      =3  #define set_SPR0    SPCR    |= SET_BIT0
1002      =3  
1003      =3  #define clr_SSOE    SPCR    &= ~SET_BIT7
1004      =3  #define clr_SPIEN   SPCR    &= ~SET_BIT6
1005      =3  #define clr_LSBFE   SPCR    &= ~SET_BIT5
1006      =3  #define clr_MSTR    SPCR    &= ~SET_BIT4
1007      =3  #define clr_CPOL    SPCR    &= ~SET_BIT3
1008      =3  #define clr_CPHA    SPCR    &= ~SET_BIT2
1009      =3  #define clr_SPR1    SPCR    &= ~SET_BIT1
1010      =3  #define clr_SPR0    SPCR    &= ~SET_BIT0
1011      =3  
1012      =3  //**** SPCR2    F3H PAGE1 **** SFRS must set as 1 to modify this register  
1013      =3  #define set_SPIS1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;SPCR2|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
1014      =3  #define set_SPIS0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x00;SPCR2|=SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_T
             -MP
1015      =3  
1016      =3  #define clr_SPIS1   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x00;SPCR2&=~SET_BIT1;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
1017      =3  #define clr_SPIS0   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x00;SPCR2&=~SET_BIT0;TA=0xAA;TA=0x55;SFRS=0x00;EA=BIT_
             -TMP
1018      =3  
1019      =3  //**** SPSR     F4H ****
1020      =3  #define set_SPIF    SPSR    |= SET_BIT7
1021      =3  #define set_WCOL    SPSR    |= SET_BIT6
1022      =3  #define set_SPIOVF  SPSR    |= SET_BIT5
1023      =3  #define set_MODF    SPSR    |= SET_BIT4
1024      =3  #define set_DISMODF SPSR    |= SET_BIT3
1025      =3                              
1026      =3  #define clr_SPIF    SPSR    &= ~SET_BIT7
1027      =3  #define clr_WCOL    SPSR    &= ~SET_BIT6
1028      =3  #define clr_SPIOVF  SPSR    &= ~SET_BIT5
1029      =3  #define clr_MODF    SPSR    &= ~SET_BIT4
1030      =3  #define clr_DISMODF SPSR    &= ~SET_BIT3
1031      =3  
1032      =3  //**** SPDR   F5H ****
1033      =3  
1034      =3  //**** AINDIDS  F6H ****
1035      =3  #define set_P11DIDS AINDIDS  |= SET_BIT7
1036      =3  #define set_P03DIDS AINDIDS  |= SET_BIT6
1037      =3  #define set_P04DIDS AINDIDS  |= SET_BIT5
1038      =3  #define set_P05DIDS AINDIDS  |= SET_BIT4
1039      =3  #define set_P06DIDS AINDIDS  |= SET_BIT3
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 28  

1040      =3  #define set_P07DIDS AINDIDS  |= SET_BIT2
1041      =3  #define set_P30DIDS AINDIDS  |= SET_BIT1
1042      =3  #define set_P17DIDS AINDIDS  |= SET_BIT0
1043      =3  
1044      =3  #define clr_P11DIDS AINDIDS  &= ~SET_BIT7
1045      =3  #define clr_P03DIDS AINDIDS  &= ~SET_BIT6
1046      =3  #define clr_P04DIDS AINDIDS  &= ~SET_BIT5
1047      =3  #define clr_P05DIDS AINDIDS  &= ~SET_BIT4
1048      =3  #define clr_P06DIDS AINDIDS  &= ~SET_BIT3
1049      =3  #define clr_P07DIDS AINDIDS  &= ~SET_BIT2
1050      =3  #define clr_P30DIDS AINDIDS  &= ~SET_BIT1
1051      =3  #define clr_P17DIDS AINDIDS  &= ~SET_BIT0
1052      =3  
1053      =3  //**** EIPH     F7H ****
1054      =3  #define set_PT2H    EIPH    |= SET_BIT7
1055      =3  #define set_PSPIH   EIPH    |= SET_BIT6
1056      =3  #define set_PFBH    EIPH    |= SET_BIT5
1057      =3  #define set_PWDTH   EIPH    |= SET_BIT4
1058      =3  #define set_PPWMH   EIPH    |= SET_BIT3
1059      =3  #define set_PCAPH   EIPH    |= SET_BIT2
1060      =3  #define set_PPIH    EIPH    |= SET_BIT1
1061      =3  #define set_PI2CH   EIPH    |= SET_BIT0
1062      =3                              
1063      =3  #define clr_PT2H    EIPH    &= ~SET_BIT7
1064      =3  #define clr_PSPIH   EIPH    &= ~SET_BIT6
1065      =3  #define clr_PFBH    EIPH    &= ~SET_BIT5
1066      =3  #define clr_PWDTH   EIPH    &= ~SET_BIT4
1067      =3  #define clr_PPWMH   EIPH    &= ~SET_BIT3
1068      =3  #define clr_PCAPH   EIPH    &= ~SET_BIT2
1069      =3  #define clr_PPIH    EIPH    &= ~SET_BIT1
1070      =3  #define clr_PI2CH   EIPH    &= ~SET_BIT0
1071      =3  
1072      =3  /**** SCON_1    F8H ****/
1073      =3  #define set_FE_1    FE_1  = 1
1074      =3  #define set_SM1_1   SM1_1 = 1
1075      =3  #define set_SM2_1   SM2_1 = 1
1076      =3  #define set_REN_1   REN_1 = 1
1077      =3  #define set_TB8_1   TB8_1 = 1
1078      =3  #define set_RB8_1   RB8_1 = 1
1079      =3  #define set_TI_1    TI_1  = 1
1080      =3  #define set_RI_1    RI_1  = 1
1081      =3  
1082      =3  #define clr_FE_1    FE_1  = 0
1083      =3  #define clr_SM1_1   SM1_1 = 0
1084      =3  #define clr_SM2_1   SM2_1 = 0
1085      =3  #define clr_REN_1   REN_1 = 0
1086      =3  #define clr_TB8_1   TB8_1 = 0
1087      =3  #define clr_RB8_1   RB8_1 = 0
1088      =3  #define clr_TI_1    TI_1  = 0
1089      =3  #define clr_RI_1    RI_1  = 0
1090      =3  
1091      =3  //**** PDTEN    F9H ****
1092      =3  #define set_PDT45EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|= SET_BIT2  ;EA=BIT_TMP;
1093      =3  #define set_PDT23EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|= SET_BIT1  ;EA=BIT_TMP;
1094      =3  #define set_PDT01EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|= SET_BIT0  ;EA=BIT_TMP;
1095      =3  
1096      =3  #define clr_PDT45EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN &= ~SET_BIT2 ;EA=BIT_TMP;
1097      =3  #define clr_PDT23EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN &= ~SET_BIT1 ;EA=BIT_TMP;
1098      =3  #define clr_PDT01EN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN &= ~SET_BIT0 ;EA=BIT_TMP;
1099      =3  
1100      =3  //**** PDTCNT   FAH ****
1101      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 29  

1102      =3  //**** PMEN     FBH ****                   
1103      =3  #define set_PMEN5   PMEN    |= SET_BIT5
1104      =3  #define set_PMEN4   PMEN    |= SET_BIT4
1105      =3  #define set_PMEN3   PMEN    |= SET_BIT3
1106      =3  #define set_PMEN2   PMEN    |= SET_BIT2
1107      =3  #define set_PMEN1   PMEN    |= SET_BIT1
1108      =3  #define set_PMEN0   PMEN    |= SET_BIT0
1109      =3                              
1110      =3  #define clr_PMEN5   PMEN    &= ~SET_BIT5
1111      =3  #define clr_PMEN4   PMEN    &= ~SET_BIT4
1112      =3  #define clr_PMEN3   PMEN    &= ~SET_BIT3
1113      =3  #define clr_PMEN2   PMEN    &= ~SET_BIT2
1114      =3  #define clr_PMEN1   PMEN    &= ~SET_BIT1
1115      =3  #define clr_PMEN0   PMEN    &= ~SET_BIT0
1116      =3                              
1117      =3  //**** PMD    FCH ****                       
1118      =3  #define set_PMD7    PMD     |= SET_BIT7
1119      =3  #define set_PMD6    PMD     |= SET_BIT6
1120      =3  #define set_PMD5    PMD     |= SET_BIT5
1121      =3  #define set_PMD4    PMD     |= SET_BIT4
1122      =3  #define set_PMD3    PMD     |= SET_BIT3
1123      =3  #define set_PMD2    PMD     |= SET_BIT2
1124      =3  #define set_PMD1    PMD     |= SET_BIT1
1125      =3  #define set_PMD0    PMD     |= SET_BIT0
1126      =3                              
1127      =3  #define clr_PMD7    PMD     &= ~SET_BIT7
1128      =3  #define clr_PMD6    PMD     &= ~SET_BIT6
1129      =3  #define clr_PMD5    PMD     &= ~SET_BIT5
1130      =3  #define clr_PMD4    PMD     &= ~SET_BIT4
1131      =3  #define clr_PMD3    PMD     &= ~SET_BIT3
1132      =3  #define clr_PMD2    PMD     &= ~SET_BIT2
1133      =3  #define clr_PMD1    PMD     &= ~SET_BIT1
1134      =3  #define clr_PMD0    PMD     &= ~SET_BIT0
1135      =3  
1136      =3  //****  EIP1    FEH ****                     
1137      =3  #define set_PWKT    EIP1    |= SET_BIT2
1138      =3  #define set_PT3     EIP1    |= SET_BIT1
1139      =3  #define set_PS_1    EIP1    |= SET_BIT0
1140      =3                              
1141      =3  #define clr_PWKT    EIP1    &= ~SET_BIT2
1142      =3  #define clr_PT3     EIP1    &= ~SET_BIT1
1143      =3  #define clr_PS_1    EIP1    &= ~SET_BIT0
1144      =3  
1145      =3  //**** EIPH1    FFH ****                
1146      =3  #define set_PWKTH   EIPH1   |= SET_BIT2
1147      =3  #define set_PT3H    EIPH1   |= SET_BIT1
1148      =3  #define set_PSH_1   EIPH1   |= SET_BIT0
1149      =3                              
1150      =3  #define clr_PWKTH   EIPH1   &= ~SET_BIT2
1151      =3  #define clr_PT3H    EIPH1   &= ~SET_BIT1
1152      =3  #define clr_PSH_1   EIPH1   &= ~SET_BIT0
1153      =3  
1154      =3  
1155      =3  
1156      =3  
1157      =3  
1158      =3  
1159      =3  
1160      =3                              
1161      =3  
1162      =3  
1163      =3                              
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 30  

1164      =3                 
1165      =3  
1166      =3  
1167      =3  
1168      =3  
1169      =3  
1170      =3  
1171      =3  
1172      =3  
1173      =3  
1174      =3  
1175      =3  
1176      =3  
  22      =2  #include "../mcu/Function_define.h"
   1      =3  /*--------------------------------------------------------------------------
   2      =3  N76E003 Function_define.h V1.02
   3      =3  
   4      =3  All function define inital setting file for Nuvoton N76E003
   5      =3  --------------------------------------------------------------------------*/
   6      =3  
   7      =3  #include <intrins.h>
   1      =4  /*--------------------------------------------------------------------------
   2      =4  INTRINS.H
   3      =4  
   4      =4  Intrinsic functions for C51.
   5      =4  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, Inc.
   6      =4  All rights reserved.
   7      =4  --------------------------------------------------------------------------*/
   8      =4  
   9      =4  #ifndef __INTRINS_H__
  10      =4  #define __INTRINS_H__
  11      =4  
  12      =4  extern void          _nop_     (void);
  13      =4  extern bit           _testbit_ (bit);
  14      =4  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =4  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =4  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =4  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =4  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =4  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =4  extern unsigned char _chkfloat_(float);
  21      =4  extern void          _push_    (unsigned char _sfr);
  22      =4  extern void          _pop_     (unsigned char _sfr);
  23      =4  
  24      =4  #endif
  25      =4  
   8      =3  #include <stdio.h>
   1      =4  /*--------------------------------------------------------------------------
   2      =4  STDIO.H
   3      =4  
   4      =4  Prototypes for standard I/O functions.
   5      =4  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =4  All rights reserved.
   7      =4  --------------------------------------------------------------------------*/
   8      =4  
   9      =4  #ifndef __STDIO_H__
           =4 #define __STDIO_H__
           =4 
           =4 #ifndef EOF
           =4  #define EOF -1
           =4 #endif
           =4 
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 31  

           =4 #ifndef NULL
           =4  #define NULL ((void *) 0)
           =4 #endif
           =4 
           =4 #ifndef _SIZE_T
           =4  #define _SIZE_T
           =4  typedef unsigned int size_t;
           =4 #endif
           =4 
           =4 #pragma SAVE
           =4 #pragma REGPARMS
           =4 extern char _getkey (void);
           =4 extern char getchar (void);
           =4 extern char ungetchar (char);
           =4 extern char putchar (char);
           =4 extern int printf   (const char *, ...);
           =4 extern int sprintf  (char *, const char *, ...);
           =4 extern int vprintf  (const char *, char *);
           =4 extern int vsprintf (char *, const char *, char *);
           =4 extern char *gets (char *, int n);
           =4 extern int scanf (const char *, ...);
           =4 extern int sscanf (char *, const char *, ...);
           =4 extern int puts (const char *);
           =4 
           =4 #pragma RESTORE
           =4 
           =4 #endif
  43      =4  
   9      =3  
  10      =3  #define nop _nop_();
  11      =3  
  12      =3  
  13      =3  //16 --> 8 x 2
  14      =3  #define HIBYTE(v1)              ((UINT8)((v1)>>8))                      //v1 is UINT16
  15      =3  #define LOBYTE(v1)              ((UINT8)((v1)&0xFF))
  16      =3  //8 x 2 --> 16
  17      =3  #define MAKEWORD(v1,v2)         ((((UINT16)(v1))<<8)+(UINT16)(v2))      //v1,v2 is UINT8
  18      =3  //8 x 4 --> 32
  19      =3  #define MAKELONG(v1,v2,v3,v4)   (UINT32)((v1<<32)+(v2<<16)+(v3<<8)+v4)  //v1,v2,v3,v4 is UINT8
  20      =3  //32 --> 16 x 2
  21      =3  #define YBYTE1(v1)              ((UINT16)((v1)>>16))                    //v1 is UINT32
  22      =3  #define YBYTE0(v1)              ((UINT16)((v1)&0xFFFF))
  23      =3  //32 --> 8 x 4
  24      =3  #define TBYTE3(v1)              ((UINT8)((v1)>>24))                     //v1 is UINT32
  25      =3  #define TBYTE2(v1)              ((UINT8)((v1)>>16))
  26      =3  #define TBYTE1(v1)              ((UINT8)((v1)>>8)) 
  27      =3  #define TBYTE0(v1)              ((UINT8)((v1)&0xFF))
  28      =3  
  29      =3  #define SET_BIT0        0x01
  30      =3  #define SET_BIT1        0x02
  31      =3  #define SET_BIT2        0x04
  32      =3  #define SET_BIT3        0x08
  33      =3  #define SET_BIT4        0x10
  34      =3  #define SET_BIT5        0x20
  35      =3  #define SET_BIT6        0x40
  36      =3  #define SET_BIT7        0x80
  37      =3  #define SET_BIT8        0x0100
  38      =3  #define SET_BIT9        0x0200
  39      =3  #define SET_BIT10       0x0400
  40      =3  #define SET_BIT11       0x0800
  41      =3  #define SET_BIT12       0x1000
  42      =3  #define SET_BIT13       0x2000
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 32  

  43      =3  #define SET_BIT14       0x4000
  44      =3  #define SET_BIT15       0x8000
  45      =3  
  46      =3  #define CLR_BIT0        0xFE
  47      =3  #define CLR_BIT1        0xFD
  48      =3  #define CLR_BIT2        0xFB
  49      =3  #define CLR_BIT3        0xF7
  50      =3  #define CLR_BIT4        0xEF
  51      =3  #define CLR_BIT5        0xDF
  52      =3  #define CLR_BIT6        0xBF
  53      =3  #define CLR_BIT7        0x7F
  54      =3  
  55      =3  #define CLR_BIT8        0xFEFF
  56      =3  #define CLR_BIT9        0xFDFF
  57      =3  #define CLR_BIT10       0xFBFF
  58      =3  #define CLR_BIT11       0xF7FF
  59      =3  #define CLR_BIT12       0xEFFF
  60      =3  #define CLR_BIT13       0xDFFF
  61      =3  #define CLR_BIT14       0xBFFF
  62      =3  #define CLR_BIT15       0x7FFF
  63      =3  
  64      =3  #define FAIL            1
  65      =3  #define PASS            0
  66      =3  
  67      =3  /*****************************************************************************************
  68      =3  * For GPIO INIT setting 
  69      =3  *****************************************************************************************/
  70      =3  //------------------- Define Port as Quasi mode  -------------------
  71      =3  #define P00_Quasi_Mode        P0M1&=~SET_BIT0;P0M2&=~SET_BIT0
  72      =3  #define P01_Quasi_Mode        P0M1&=~SET_BIT1;P0M2&=~SET_BIT1
  73      =3  #define P02_Quasi_Mode        P0M1&=~SET_BIT2;P0M2&=~SET_BIT2
  74      =3  #define P03_Quasi_Mode        P0M1&=~SET_BIT3;P0M2&=~SET_BIT3
  75      =3  #define P04_Quasi_Mode        P0M1&=~SET_BIT4;P0M2&=~SET_BIT4
  76      =3  #define P05_Quasi_Mode        P0M1&=~SET_BIT5;P0M2&=~SET_BIT5
  77      =3  #define P06_Quasi_Mode        P0M1&=~SET_BIT6;P0M2&=~SET_BIT6
  78      =3  #define P07_Quasi_Mode        P0M1&=~SET_BIT7;P0M2&=~SET_BIT7
  79      =3  #define P10_Quasi_Mode        P1M1&=~SET_BIT0;P1M2&=~SET_BIT0
  80      =3  #define P11_Quasi_Mode        P1M1&=~SET_BIT1;P1M2&=~SET_BIT1
  81      =3  #define P12_Quasi_Mode        P1M1&=~SET_BIT2;P1M2&=~SET_BIT2
  82      =3  #define P13_Quasi_Mode        P1M1&=~SET_BIT3;P1M2&=~SET_BIT3
  83      =3  #define P14_Quasi_Mode        P1M1&=~SET_BIT4;P1M2&=~SET_BIT4
  84      =3  #define P15_Quasi_Mode        P1M1&=~SET_BIT5;P1M2&=~SET_BIT5
  85      =3  #define P16_Quasi_Mode        P1M1&=~SET_BIT6;P1M2&=~SET_BIT6
  86      =3  #define P17_Quasi_Mode        P1M1&=~SET_BIT7;P1M2&=~SET_BIT7
  87      =3  #define P30_Quasi_Mode        P3M1&=~SET_BIT0;P3M2&=~SET_BIT0
  88      =3  //------------------- Define Port as Push Pull mode -------------------
  89      =3  #define P00_PushPull_Mode     P0M1&=~SET_BIT0;P0M2|=SET_BIT0
  90      =3  #define P01_PushPull_Mode     P0M1&=~SET_BIT1;P0M2|=SET_BIT1
  91      =3  #define P02_PushPull_Mode     P0M1&=~SET_BIT2;P0M2|=SET_BIT2
  92      =3  #define P03_PushPull_Mode     P0M1&=~SET_BIT3;P0M2|=SET_BIT3
  93      =3  #define P04_PushPull_Mode     P0M1&=~SET_BIT4;P0M2|=SET_BIT4
  94      =3  #define P05_PushPull_Mode     P0M1&=~SET_BIT5;P0M2|=SET_BIT5
  95      =3  #define P06_PushPull_Mode     P0M1&=~SET_BIT6;P0M2|=SET_BIT6
  96      =3  #define P07_PushPull_Mode     P0M1&=~SET_BIT7;P0M2|=SET_BIT7
  97      =3  #define P10_PushPull_Mode     P1M1&=~SET_BIT0;P1M2|=SET_BIT0
  98      =3  #define P11_PushPull_Mode     P1M1&=~SET_BIT1;P1M2|=SET_BIT1
  99      =3  #define P12_PushPull_Mode     P1M1&=~SET_BIT2;P1M2|=SET_BIT2
 100      =3  #define P13_PushPull_Mode     P1M1&=~SET_BIT3;P1M2|=SET_BIT3
 101      =3  #define P14_PushPull_Mode     P1M1&=~SET_BIT4;P1M2|=SET_BIT4
 102      =3  #define P15_PushPull_Mode     P1M1&=~SET_BIT5;P1M2|=SET_BIT5
 103      =3  #define P16_PushPull_Mode     P1M1&=~SET_BIT6;P1M2|=SET_BIT6
 104      =3  #define P17_PushPull_Mode     P1M1&=~SET_BIT7;P1M2|=SET_BIT7
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 33  

 105      =3  #define P30_PushPull_Mode     P3M1&=~SET_BIT0;P3M2|=SET_BIT0
 106      =3  #define GPIO1_PushPull_Mode   P1M1&=~SET_BIT0;P1M2|=SET_BIT0
 107      =3  //------------------- Define Port as Input Only mode -------------------
 108      =3  #define P00_Input_Mode        P0M1|=SET_BIT0;P0M2&=~SET_BIT0
 109      =3  #define P01_Input_Mode        P0M1|=SET_BIT1;P0M2&=~SET_BIT1
 110      =3  #define P02_Input_Mode        P0M1|=SET_BIT2;P0M2&=~SET_BIT2
 111      =3  #define P03_Input_Mode        P0M1|=SET_BIT3;P0M2&=~SET_BIT3
 112      =3  #define P04_Input_Mode        P0M1|=SET_BIT4;P0M2&=~SET_BIT4
 113      =3  #define P05_Input_Mode        P0M1|=SET_BIT5;P0M2&=~SET_BIT5
 114      =3  #define P06_Input_Mode        P0M1|=SET_BIT6;P0M2&=~SET_BIT6
 115      =3  #define P07_Input_Mode        P0M1|=SET_BIT7;P0M2&=~SET_BIT7
 116      =3  #define P10_Input_Mode        P1M1|=SET_BIT0;P1M2&=~SET_BIT0
 117      =3  #define P11_Input_Mode        P1M1|=SET_BIT1;P1M2&=~SET_BIT1
 118      =3  #define P12_Input_Mode        P1M1|=SET_BIT2;P1M2&=~SET_BIT2
 119      =3  #define P13_Input_Mode        P1M1|=SET_BIT3;P1M2&=~SET_BIT3
 120      =3  #define P14_Input_Mode        P1M1|=SET_BIT4;P1M2&=~SET_BIT4
 121      =3  #define P15_Input_Mode        P1M1|=SET_BIT5;P1M2&=~SET_BIT5
 122      =3  #define P16_Input_Mode        P1M1|=SET_BIT6;P1M2&=~SET_BIT6
 123      =3  #define P17_Input_Mode        P1M1|=SET_BIT7;P1M2&=~SET_BIT7
 124      =3  #define P30_Input_Mode        P3M1|=SET_BIT0;P3M2&=~SET_BIT0
 125      =3  //-------------------Define Port as Open Drain mode -------------------
 126      =3  #define P00_OpenDrain_Mode    P0M1|=SET_BIT0;P0M2|=SET_BIT0
 127      =3  #define P01_OpenDrain_Mode    P0M1|=SET_BIT1;P0M2|=SET_BIT1
 128      =3  #define P02_OpenDrain_Mode    P0M1|=SET_BIT2;P0M2|=SET_BIT2
 129      =3  #define P03_OpenDrain_Mode    P0M1|=SET_BIT3;P0M2|=SET_BIT3
 130      =3  #define P04_OpenDrain_Mode    P0M1|=SET_BIT4;P0M2|=SET_BIT4
 131      =3  #define P05_OpenDrain_Mode    P0M1|=SET_BIT5;P0M2|=SET_BIT5
 132      =3  #define P06_OpenDrain_Mode    P0M1|=SET_BIT6;P0M2|=SET_BIT6
 133      =3  #define P07_OpenDrain_Mode    P0M1|=SET_BIT7;P0M2|=SET_BIT7
 134      =3  #define P10_OpenDrain_Mode    P1M1|=SET_BIT0;P1M2|=SET_BIT0
 135      =3  #define P11_OpenDrain_Mode    P1M1|=SET_BIT1;P1M2|=SET_BIT1
 136      =3  #define P12_OpenDrain_Mode    P1M1|=SET_BIT2;P1M2|=SET_BIT2
 137      =3  #define P13_OpenDrain_Mode    P1M1|=SET_BIT3;P1M2|=SET_BIT3
 138      =3  #define P14_OpenDrain_Mode    P1M1|=SET_BIT4;P1M2|=SET_BIT4
 139      =3  #define P15_OpenDrain_Mode    P1M1|=SET_BIT5;P1M2|=SET_BIT5
 140      =3  #define P16_OpenDrain_Mode    P1M1|=SET_BIT6;P1M2|=SET_BIT6
 141      =3  #define P17_OpenDrain_Mode    P1M1|=SET_BIT7;P1M2|=SET_BIT7
 142      =3  #define P30_OpenDrain_Mode    P3M1|=SET_BIT0;P3M2|=SET_BIT0
 143      =3  //--------- Define all port as quasi mode ---------
 144      =3  #define Set_All_GPIO_Quasi_Mode     P0M1=0;P0M2=0;P1M1=0;P1M2=0;P3M1=0;P3M2=0
 145      =3  
 146      =3  #define     set_GPIO1   P12=1
 147      =3  #define     clr_GPIO1   P12=0
 148      =3  
 149      =3  /****************************************************************************
 150      =3     Enable INT port 0~3
 151      =3  ***************************************************************************/
 152      =3  #define   Enable_INT_Port0          PICON &= 0xFB;
 153      =3  #define   Enable_INT_Port1          PICON |= 0x01;
 154      =3  #define   Enable_INT_Port2          PICON |= 0x02;
 155      =3  #define   Enable_INT_Port3          PICON |= 0x03;
 156      =3  /*****************************************************************************
 157      =3   Enable each bit low level trig mode
 158      =3  *****************************************************************************/
 159      =3  #define   Enable_BIT7_LowLevel_Trig     PICON&=0x7F;PINEN|=0x80;PIPEN&=0x7F
 160      =3  #define   Enable_BIT6_LowLevel_Trig     PICON&=0x7F;PINEN|=0x40;PIPEN&=0xBF
 161      =3  #define   Enable_BIT5_LowLevel_Trig     PICON&=0xBF;PINEN|=0x20;PIPEN&=0xDF
 162      =3  #define   Enable_BIT4_LowLevel_Trig     PICON&=0xBF;PINEN|=0x10;PIPEN&=0xEF
 163      =3  #define   Enable_BIT3_LowLevel_Trig     PICON&=0xDF;PINEN|=0x08;PIPEN&=0xF7
 164      =3  #define   Enable_BIT2_LowLevel_Trig     PICON&=0xEF;PINEN|=0x04;PIPEN&=0xFB
 165      =3  #define   Enable_BIT1_LowLevel_Trig     PICON&=0xF7;PINEN|=0x02;PIPEN&=0xFD
 166      =3  #define   Enable_BIT0_LowLevel_Trig     PICON&=0xFD;PINEN|=0x01;PIPEN&=0xFE
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 34  

 167      =3  /*****************************************************************************
 168      =3   Enable each bit high level trig mode
 169      =3  *****************************************************************************/
 170      =3  #define   Enable_BIT7_HighLevel_Trig      PICON&=0x7F;PINEN&=0x7F;PIPEN|=0x80
 171      =3  #define   Enable_BIT6_HighLevel_Trig      PICON&=0x7F;PINEN&=0xBF;PIPEN|=0x40
 172      =3  #define   Enable_BIT5_HighLevel_Trig      PICON&=0xBF;PINEN&=0xDF;PIPEN|=0x20
 173      =3  #define   Enable_BIT4_HighLevel_Trig      PICON&=0xBF;PINEN&=0xEF;PIPEN|=0x10
 174      =3  #define   Enable_BIT3_HighLevel_Trig      PICON&=0xDF;PINEN&=0xF7;PIPEN|=0x08
 175      =3  #define   Enable_BIT2_HighLevel_Trig      PICON&=0xEF;PINEN&=0xFB;PIPEN|=0x04
 176      =3  #define   Enable_BIT1_HighLevel_Trig      PICON&=0xF7;PINEN&=0xFD;PIPEN|=0x02
 177      =3  #define   Enable_BIT0_HighLevel_Trig      PICON&=0xFD;PINEN&=0xFE;PIPEN|=0x01
 178      =3  /*****************************************************************************
 179      =3   Enable each bit falling edge trig mode
 180      =3  *****************************************************************************/
 181      =3  #define   Enable_BIT7_FallEdge_Trig     PICON|=0x80;PINEN|=0x80;PIPEN&=0x7F
 182      =3  #define   Enable_BIT6_FallEdge_Trig     PICON|=0x80;PINEN|=0x40;PIPEN&=0xBF
 183      =3  #define   Enable_BIT5_FallEdge_Trig     PICON|=0x40;PINEN|=0x20;PIPEN&=0xDF
 184      =3  #define   Enable_BIT4_FallEdge_Trig     PICON|=0x40;PINEN|=0x10;PIPEN&=0xEF
 185      =3  #define   Enable_BIT3_FallEdge_Trig     PICON|=0x20;PINEN|=0x08;PIPEN&=0xF7
 186      =3  #define   Enable_BIT2_FallEdge_Trig     PICON|=0x10;PINEN|=0x04;PIPEN&=0xFB
 187      =3  #define   Enable_BIT1_FallEdge_Trig     PICON|=0x08;PINEN|=0x02;PIPEN&=0xFD
 188      =3  #define   Enable_BIT0_FallEdge_Trig     PICON|=0x04;PINEN|=0x01;PIPEN&=0xFE
 189      =3  /*****************************************************************************
 190      =3   Enable each bit rasing edge trig mode
 191      =3  *****************************************************************************/
 192      =3  #define   Enable_BIT7_RasingEdge_Trig     PICON|=0x80;PINEN&=0x7F;PIPEN|=0x80
 193      =3  #define   Enable_BIT6_RasingEdge_Trig     PICON|=0x80;PINEN&=0xBF;PIPEN|=0x40
 194      =3  #define   Enable_BIT5_RasingEdge_Trig     PICON|=0x40;PINEN&=0xDF;PIPEN|=0x20
 195      =3  #define   Enable_BIT4_RasingEdge_Trig     PICON|=0x40;PINEN&=0xEF;PIPEN|=0x10
 196      =3  #define   Enable_BIT3_RasingEdge_Trig     PICON|=0x20;PINEN&=0xF7;PIPEN|=0x08
 197      =3  #define   Enable_BIT2_RasingEdge_Trig     PICON|=0x10;PINEN&=0xFB;PIPEN|=0x04
 198      =3  #define   Enable_BIT1_RasingEdge_Trig     PICON|=0x08;PINEN&=0xFD;PIPEN|=0x02
 199      =3  #define   Enable_BIT0_RasingEdge_Trig     PICON|=0x04;PINEN&=0xFE;PIPEN|=0x01
 200      =3  
 201      =3  
 202      =3  /*****************************************************************************************
 203      =3  * For TIMER VALUE setting is base on " option -> C51 -> Preprocesser Symbols -> Define "
 204      =3  *****************************************************************************************/
 205      =3  #ifdef FOSC_110592    // if Fsys = 11.0592MHz 
           =3     #define TIMER_DIV12_VALUE_10us      65536-9     //9*12/11.0592 = 10 uS,         // Timer divider = 12 for TM0/
             -TM1
           =3     #define TIMER_DIV12_VALUE_1ms       65536-923   //923*12/11.0592 = 1 mS         // Timer divider = 12
           =3     #define TIMER_DIV12_VALUE_10ms      65536-9216  //18432*12/22118400 = 10 ms     // Timer divider = 12
           =3     #define TIMER_DIV4_VALUE_10us       65536-28    //28*4/11.0592 = 10 uS          // Timer divider = 4  for TM2/TM3
           =3     #define TIMER_DIV4_VALUE_1ms        65536-2765  //2765*4/11.0592 = 1 mS         // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_100us      65536-277   //553*4/22118400 = 100 us       // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_200us      65536-553   //1106*4/22118400 = 200 us      // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_500us      65536-1383  //2765*4/22118400 = 500 us      // Timer divider = 4    
           =3     #define TIMER_DIV16_VALUE_10ms      65536-6912  //1500*16/22118400 = 10 ms      // Timer divider = 16
           =3     #define TIMER_DIV64_VALUE_30ms      65536-5184  //10368*64/22118400 = 30 ms     // Timer divider = 64
           =3     #define TIMER_DIV128_VALUE_100ms    65536-8640  //17280*128/22118400 = 100 ms   // Timer divider = 128
           =3     #define TIMER_DIV128_VALUE_200ms    65536-17280 //34560*128/22118400 = 200 ms   // Timer divider = 128
           =3     #define TIMER_DIV256_VALUE_500ms    65536-21600 //43200*256/22118400 = 500 ms   // Timer divider = 256
           =3     #define TIMER_DIV512_VALUE_1s       65536-21600 //43200*512/22118400 = 1 s      // Timer divider = 512
           =3 #endif
 221      =3  #ifdef FOSC_160000    // if Fsys = 16MHz 
           =3     #define TIMER_DIV12_VALUE_10us      65536-13    //13*12/16000000 = 10 uS,       // Timer divider = 12 for TM0/T
             -M1
           =3     #define TIMER_DIV12_VALUE_100us     65536-130   //130*12/16000000 = 10 uS,      // Timer divider = 12 
           =3     #define TIMER_DIV12_VALUE_1ms       65536-1334  //1334*12/16000000 = 1 mS,      // Timer divider = 12 
           =3     #define TIMER_DIV12_VALUE_10ms      65536-13334 //13334*12/16000000 = 10 mS     // Timer divider = 12 
           =3     #define TIMER_DIV12_VALUE_40ms      65536-53336 //53336*12/16000000 = 40 ms     // Timer divider = 12 
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 35  

           =3     #define TIMER_DIV4_VALUE_10us       65536-40    //40*4/16000000 = 10 uS,        // Timer divider = 4  for TM2/TM
             -3
           =3     #define TIMER_DIV4_VALUE_100us      65536-400   //400*4/16000000 = 100 us       // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_200us      65536-800   //800*4/16000000 = 200 us       // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_500us      65536-2000  //2000*4/16000000 = 500 us      // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_1ms        65536-4000  //4000*4/16000000 = 1 mS,       // Timer divider = 4
           =3     #define TIMER_DIV16_VALUE_10ms      65536-10000 //10000*16/16000000 = 10 ms     // Timer  divider = 16
           =3     #define TIMER_DIV64_VALUE_30ms      65536-7500  //7500*64/16000000 = 30 ms      // Timer divider = 64
           =3     #define TIMER_DIV128_VALUE_100ms    65536-12500 //12500*128/16000000 = 100 ms   // Timer divider = 128
           =3     #define TIMER_DIV128_VALUE_200ms    65536-25000 //25000*128/16000000 = 200 ms   // Timer divider = 128
           =3     #define TIMER_DIV256_VALUE_500ms    65536-31250 //31250*256/16000000 = 500 ms   // Timer divider = 256
           =3     #define TIMER_DIV512_VALUE_1s       65536-31250 //31250*512/16000000 = 1 s.     // Timer Divider = 512
           =3 #endif
 239      =3  #ifdef FOSC_184320    // if Fsys = 18.432MHz 
           =3     #define TIMER_DIV12_VALUE_10us      65536-15    //15*12/18.432 = 10 uS,  Timer Clock = Fsys/12
           =3     #define TIMER_DIV12_VALUE_1ms       65536-1536  //1536*12/18.432 = 1 mS, Timer Clock = Fsys/12
           =3     #define TIMER_DIV4_VALUE_10us       65536-46    //46*4/18.432 = 10 uS,   Timer Clock = Fsys/4
           =3     #define TIMER_DIV4_VALUE_1ms        65536-4608  //4608*4/18.432 = 1 mS,  Timer Clock = Fsys/4
           =3 #endif
 245      =3  #ifdef FOSC_200000    // if Fsys = 20 MHz
           =3     #define TIMER_DIV12_VALUE_10us      65536-17   //17*12/20000000 = 10 uS,  Timer Clock = Fsys/12
           =3     #define TIMER_DIV12_VALUE_1ms       65536-1667    //1667*12/20000000 = 1 mS, Timer Clock = Fsys/12
           =3     #define TIMER_DIV4_VALUE_10us       65536-50      //50*4/20000000 = 10 uS,    Timer Clock = Fsys/4
           =3     #define TIMER_DIV4_VALUE_1ms        65536-5000    //5000*4/20000000 = 1 mS,   Timer Clock = Fsys/4
           =3 #endif
 251      =3  #ifdef FOSC_221184    // if Fsys = 22.1184 MHz 
           =3     #define TIMER_DIV12_VALUE_10us      65536-18        //18*12/22118400 = 10 uS,       // Timer divider = 12
           =3     #define TIMER_DIV12_VALUE_1ms       65536-1843      //1843*12/22118400 = 1 mS,      // Timer divider = 12
           =3     #define TIMER_DIV12_VALUE_10ms      65536-18432     //18432*12/22118400 = 10 ms     // Timer divider = 12
           =3     #define TIMER_DIV4_VALUE_10us       65536-56        //9*4/22118400 = 10 uS,         // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_1ms        65536-5530      //923*4/22118400 = 1 mS,        // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_100us      65536-553       //553*4/22118400 = 100 us       // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_200us      65536-1106      //1106*4/22118400 = 200 us      // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_500us      65536-2765      //2765*4/22118400 = 500 us      // Timer divider = 4    
           =3     #define TIMER_DIV16_VALUE_10ms      65536-13824     //1500*16/22118400 = 10 ms      // Timer divider = 16
           =3     #define TIMER_DIV64_VALUE_30ms      65536-10368     //10368*64/22118400 = 30 ms     // Timer divider = 64
           =3     #define TIMER_DIV128_VALUE_100ms    65536-17280     //17280*128/22118400 = 100 ms   // Timer divider = 128
           =3     #define TIMER_DIV128_VALUE_200ms    65536-34560     //34560*128/22118400 = 200 ms   // Timer divider = 128
           =3     #define TIMER_DIV256_VALUE_500ms    65536-43200     //43200*256/22118400 = 500 ms   // Timer divider = 256
           =3     #define TIMER_DIV512_VALUE_1s       65536-43200     //43200*512/22118400 = 1 s      // Timer divider = 512
           =3 #endif
 267      =3  #ifdef FOSC_240000    // if Fsys = 20 MHz
           =3     #define TIMER_DIV12_VALUE_10us      65536-20        //20*12/24000000 = 10 uS,       // Timer divider = 12
           =3     #define TIMER_DIV12_VALUE_1ms       65536-2000      //2000*12/24000000 = 1 mS,      // Timer divider = 12
           =3     #define TIMER_DIV12_VALUE_10ms      65536-20000     //2000*12/24000000 = 10 mS      // Timer divider = 12
           =3     #define TIMER_DIV4_VALUE_10us       65536-60        //60*4/24000000 = 10 uS,        // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_100us      65536-600       //600*4/24000000 = 100 us       // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_200us      65536-1200      //1200*4/24000000 = 200 us      // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_500us      65536-3000      //3000*4/24000000 = 500 us      // Timer divider = 4
           =3     #define TIMER_DIV4_VALUE_1ms        65536-6000      //6000*4/24000000 = 1 mS,       // Timer divider = 4
           =3     #define TIMER_DIV16_VALUE_10ms      65536-15000     //15000*16/24000000 = 10 ms     // Timer  divider = 16
           =3     #define TIMER_DIV64_VALUE_30ms      65536-11250     //11250*64/24000000 = 30 ms     // Timer divider = 64
           =3     #define TIMER_DIV128_VALUE_100ms    65536-18750     //37500*128/24000000 = 200 ms   // Timer divider = 128
           =3     #define TIMER_DIV128_VALUE_200ms    65536-37500     //37500*128/24000000 = 200 ms   // Timer divider = 128
           =3     #define TIMER_DIV256_VALUE_500ms    65536-46875     //46875*256/24000000 = 500 ms   // Timer divider = 256
           =3     #define TIMER_DIV512_VALUE_1s       65536-46875     //46875*512/24000000 = 1 s.     // Timer Divider = 512
           =3 #endif
 283      =3  //-------------------- Timer0 function define --------------------
 284      =3  #define   TIMER1_MODE0_ENABLE   TMOD&=0x0F
 285      =3  #define   TIMER1_MODE1_ENABLE   TMOD&=0x0F;TMOD|=0x10
 286      =3  #define   TIMER1_MODE2_ENABLE   TMOD&=0x0F;TMOD|=0x20
 287      =3  #define   TIMER1_MODE3_ENABLE   TMOD&=0x0F;TMOD|=0x30
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 36  

 288      =3  //-------------------- Timer1 function define --------------------
 289      =3  #define   TIMER0_MODE0_ENABLE   TMOD&=0xF0
 290      =3  #define   TIMER0_MODE1_ENABLE   TMOD&=0xF0;TMOD|=0x01
 291      =3  #define   TIMER0_MODE2_ENABLE   TMOD&=0xF0;TMOD|=0x02
 292      =3  #define   TIMER0_MODE3_ENABLE   TMOD&=0xF0;TMOD|=0x03
 293      =3  //-------------------- Timer2 function define --------------------
 294      =3  #define   TIMER2_DIV_4      T2MOD|=0x10;T2MOD&=0x9F
 295      =3  #define   TIMER2_DIV_16     T2MOD|=0x20;T2MOD&=0xAF
 296      =3  #define   TIMER2_DIV_32     T2MOD|=0x30;T2MOD&=0xBF
 297      =3  #define   TIMER2_DIV_64     T2MOD|=0x40;T2MOD&=0xCF
 298      =3  #define   TIMER2_DIV_128    T2MOD|=0x50;T2MOD&=0xDF
 299      =3  #define   TIMER2_DIV_256    T2MOD|=0x60;T2MOD&=0xEF
 300      =3  #define   TIMER2_DIV_512    T2MOD|=0x70
 301      =3  #define   TIMER2_Auto_Reload_Delay_Mode       T2CON&=~SET_BIT0;T2MOD|=SET_BIT7;T2MOD|=SET_BIT3
 302      =3  #define   TIMER2_Compare_Capture_Mode         T2CON|=SET_BIT0;T2MOD&=~SET_BIT7;T2MOD|=SET_BIT2
 303      =3  
 304      =3  #define   TIMER2_CAP0_Capture_Mode      T2CON&=~SET_BIT0;T2MOD=0x89
 305      =3  #define   TIMER2_CAP1_Capture_Mode      T2CON&=~SET_BIT0;T2MOD=0x8A
 306      =3  #define   TIMER2_CAP2_Capture_Mode      T2CON&=~SET_BIT0;T2MOD=0x8B
 307      =3  
 308      =3  //-------------------- Timer2 Capture define --------------------
 309      =3  //--- Falling Edge -----
 310      =3  #define IC0_P12_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON0|=SET_BIT4;CAPCON2|=SET_BIT4
 311      =3  #define IC1_P11_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x01;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 312      =3  #define IC2_P10_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x02;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 313      =3  #define IC3_P00_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x03;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 314      =3  #define IC3_P04_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x04;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 315      =3  #define IC4_P01_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x05;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 316      =3  #define IC5_P03_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x06;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 317      =3  #define IC6_P05_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x07;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 318      =3  #define IC7_P15_CAP0_FallingEdge_Capture    CAPCON1&=0xFC;CAPCON3&=0xF0;CAPCON3|=0x08;CAPCON0|=SET_BIT4;CAPC
             -ON2|=SET_BIT4
 319      =3  
 320      =3  #define IC0_P12_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON0|=SET_BIT5;CAPCON2|=SET_BIT5
 321      =3  #define IC1_P11_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x10;CAPCON0|=SET_BIT5;CAPC
             -ON0|=SET_BIT5
 322      =3  #define IC2_P10_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x20;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 323      =3  #define IC3_P00_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x30;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 324      =3  #define IC3_P04_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x40;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 325      =3  #define IC4_P01_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x50;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 326      =3  #define IC5_P03_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x60;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 327      =3  #define IC6_P05_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x70;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 328      =3  #define IC7_P15_CAP1_FallingEdge_Capture    CAPCON1&=0xF3;CAPCON3&=0x0F;CAPCON3|=0x80;CAPCON0|=SET_BIT5;CAPC
             -ON2|=SET_BIT5
 329      =3  
 330      =3  #define IC0_P12_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON0|=SET_BIT6;CAPCON2|=SET_BIT6
 331      =3  #define IC1_P11_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x10;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 332      =3  #define IC2_P10_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x20;CAPCON0|=SET_BIT6;CAPC
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 37  

             -ON2|=SET_BIT6
 333      =3  #define IC3_P00_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x30;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 334      =3  #define IC3_P04_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x40;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 335      =3  #define IC4_P01_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x50;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 336      =3  #define IC5_P03_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x60;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 337      =3  #define IC6_P05_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x70;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 338      =3  #define IC7_P15_CAP2_FallingEdge_Capture    CAPCON1&=0x0F;CAPCON4&=0xF0;CAPCON4|=0x80;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6
 339      =3  
 340      =3  //----- Rising edge ----
 341      =3  #define IC0_P12_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0CAPCON0|=SET_BIT4;CAPCO
             -N2|=SET_BIT4;
 342      =3  #define IC1_P11_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x01;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 343      =3  #define IC2_P10_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x02;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 344      =3  #define IC3_P00_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x03;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 345      =3  #define IC3_P04_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x04;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 346      =3  #define IC4_P01_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x05;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 347      =3  #define IC5_P03_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x06;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 348      =3  #define IC6_P05_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x07;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 349      =3  #define IC7_P15_CAP0_RisingEdge_Capture     CAPCON1&=0xFC;CAPCON1|=0x01;CAPCON3&=0xF0;CAPCON3|=0x08;CAPCON0|
             -=SET_BIT4;CAPCON2|=SET_BIT4;
 350      =3  
 351      =3  #define IC0_P12_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0FCAPCON0|=SET_BIT5;CAPCO
             -N2|=SET_BIT5;
 352      =3  #define IC1_P11_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x10;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 353      =3  #define IC2_P10_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x20;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 354      =3  #define IC3_P00_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x30;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 355      =3  #define IC3_P04_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x40;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 356      =3  #define IC4_P01_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x50;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 357      =3  #define IC5_P03_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x60;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 358      =3  #define IC6_P05_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x70;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 359      =3  #define IC7_P15_CAP1_RisingEdge_Capture     CAPCON1&=0xF3;CAPCON1|=0x04;CAPCON3&=0x0F;CAPCON3|=0x80;CAPCON0|
             -=SET_BIT5;CAPCON2|=SET_BIT5;
 360      =3  
 361      =3  #define IC0_P12_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON0|=SET_BIT6;CAPC
             -ON2|=SET_BIT6;
 362      =3  #define IC1_P11_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x01;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 363      =3  #define IC2_P10_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x02;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 364      =3  #define IC3_P00_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x03;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 365      =3  #define IC3_P04_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x04;CAPCON0|
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 38  

             -=SET_BIT6;CAPCON2|=SET_BIT6;
 366      =3  #define IC4_P01_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x05;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 367      =3  #define IC5_P03_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x06;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 368      =3  #define IC6_P05_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x07;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 369      =3  #define IC7_P15_CAP3_RisingEdge_Capture     CAPCON1&=0x0F;CAPCON1|=0x10;CAPCON4&=0xF0;CAPCON4|=0x08;CAPCON0|
             -=SET_BIT6;CAPCON2|=SET_BIT6;
 370      =3  
 371      =3  //-----BOTH  edge ----
 372      =3  #define IC0_P12_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON0|=SET_BIT4;CAPCO
             -N2|=SET_BIT4
 373      =3  #define IC1_P11_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x01;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 374      =3  #define IC2_P10_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x02;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 375      =3  #define IC3_P00_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x03;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 376      =3  #define IC3_P04_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x04;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 377      =3  #define IC4_P01_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x05;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 378      =3  #define IC5_P03_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x06;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 379      =3  #define IC6_P05_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x07;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 380      =3  #define IC7_P15_CAP0_BothEdge_Capture       CAPCON1&=0xFC;CAPCON1|=0x02;CAPCON3&=0xF0;CAPCON3|=0x08;CAPCON0|=
             -SET_BIT4;CAPCON2|=SET_BIT4
 381      =3  
 382      =3  #define IC0_P12_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON0|=SET_BIT5;CAPCO
             -N2|=SET_BIT5
 383      =3  #define IC1_P11_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x10;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 384      =3  #define IC2_P10_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x20;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 385      =3  #define IC3_P00_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x30;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 386      =3  #define IC3_P04_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x40;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 387      =3  #define IC4_P01_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x50;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 388      =3  #define IC5_P03_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x60;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 389      =3  #define IC6_P05_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x70;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 390      =3  #define IC7_P15_CAP1_BothEdge_Capture       CAPCON1&=0xF3;CAPCON1|=0x08;CAPCON3&=0x0F;CAPCON3|=0x80;CAPCON0|=
             -SET_BIT5;CAPCON2|=SET_BIT5;
 391      =3  
 392      =3  #define IC0_P12_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON0|=SET_BIT6;CAPCO
             -N2|=SET_BIT6;
 393      =3  #define IC1_P11_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x01;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 394      =3  #define IC2_P10_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x02;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 395      =3  #define IC3_P00_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x03;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 396      =3  #define IC3_P04_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x04;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 397      =3  #define IC4_P01_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x05;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 398      =3  #define IC5_P03_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x06;CAPCON0|=
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 39  

             -SET_BIT6;CAPCON2|=SET_BIT6;
 399      =3  #define IC6_P05_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x07;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 400      =3  #define IC7_P15_CAP3_BothEdge_Capture       CAPCON1&=0x0F;CAPCON1|=0x20;CAPCON4&=0xF0;CAPCON4|=0x08;CAPCON0|=
             -SET_BIT6;CAPCON2|=SET_BIT6;
 401      =3  
 402      =3  #define TIMER2_IC2_DISABLE                  CAPCON0&=~SET_BIT6       
 403      =3  #define TIMER2_IC1_DISABLE                  CAPCON0&=~SET_BIT5      
 404      =3  #define TIMER2_IC0_DISABLE                  CAPCON0&=~SET_BIT4  
 405      =3  
 406      =3  /*****************************************************************************************
 407      =3  * For PWM setting 
 408      =3  *****************************************************************************************/
 409      =3  //--------- PMW clock source select define ---------------------
 410      =3  #define   PWM_CLOCK_FSYS          CKCON&=0xBF
 411      =3  #define   PWM_CLOCK_TIMER1        CKCON|=0x40
 412      =3  //--------- PWM clock devide define ----------------------------
 413      =3  #define   PWM_CLOCK_DIV_2         PWMCON1|=0x01;PWMCON1&=0xF9
 414      =3  #define   PWM_CLOCK_DIV_4         PWMCON1|=0x02;PWMCON1&=0xFA
 415      =3  #define   PWM_CLOCK_DIV_8         PWMCON1|=0x03;PWMCON1&=0xFB
 416      =3  #define   PWM_CLOCK_DIV_16        PWMCON1|=0x04;PWMCON1&=0xFC
 417      =3  #define   PWM_CLOCK_DIV_32        PWMCON1|=0x05;PWMCON1&=0xFD
 418      =3  #define   PWM_CLOCK_DIV_64        PWMCON1|=0x06;PWMCON1&=0xFE
 419      =3  #define   PWM_CLOCK_DIV_128       PWMCON1|=0x07
 420      =3  //--------- PWM I/O select define ------------------------------
 421      =3  #define   PWM5_P15_OUTPUT_ENABLE    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1|=0x20;TA=0xAA;TA=0x55;
             -SFRS&=0xFE;EA=BIT_TMP       //P1.5 as PWM5 output enable
 422      =3  #define   PWM5_P03_OUTPUT_ENABLE    PIOCON0|=0x20                                                   //P0.3 as PWM5
 423      =3  #define   PWM4_P01_OUTPUT_ENABLE    PIOCON0|=0x10                                                   //P0.1 as PWM4 output enable
 424      =3  #define   PWM3_P04_OUTPUT_ENABLE    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1|=0x08;TA=0xAA;TA=0x55;
             -SFRS&=0xFE;EA=BIT_TMP       //P0.4 as PWM3 output enable
 425      =3  #define   PWM3_P00_OUTPUT_ENABLE    PIOCON0|=0x08                                                   //P0.0 as PWM3 
 426      =3  #define   PWM2_P05_OUTPUT_ENABLE    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1|=0x04;TA=0xAA;TA=0x55;
             -SFRS&=0xFE;EA=BIT_TMP       //P1.0 as PWM2 output enable
 427      =3  #define   PWM2_P10_OUTPUT_ENABLE    PIOCON0|=0x04                                                   //P1.0 as PWM2
 428      =3  #define   PWM1_P14_OUTPUT_ENABLE    BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1|=0x02;TA=0xAA;TA=0x55;
             -SFRS&=0xFE;EA=BIT_TMP       //P1.4 as PWM1 output enable
 429      =3  #define   PWM1_P11_OUTPUT_ENABLE    PIOCON0|=0x02                                                   //P1.1 as PWM1 
 430      =3  #define   PWM0_P12_OUTPUT_ENABLE    PIOCON0|=0x01                                                   //P1.2 as PWM0 output enable
 431      =3  #define   ALL_PWM_OUTPUT_ENABLE     PIOCON0=0xFF;PIOCON1=0xFF
 432      =3  #define   PWM5_P15_OUTPUT_DISABLE   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1&=0xDF;TA=0xAA;TA=0x55
             -;SFRS&=0xFE;EA=BIT_TMP        //P1.5 as PWM5 output disable
 433      =3  #define   PWM5_P03_OUTPUT_DISABLE   PIOCON0&=0xDF                                                   //P0.3 as PWM5
 434      =3  #define   PWM4_P01_OUTPUT_DISABLE   PIOCON0&=0xEF                                                   //P0.1 as PWM4 output disable
 435      =3  #define   PWM3_P04_OUTPUT_DISABLE   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1&=0xF7;TA=0xAA;TA=0x55
             -;SFRS&=0xFE;EA=BIT_TMP        //P0.4 as PWM3 output disable
 436      =3  #define   PWM3_P00_OUTPUT_DISABLE   PIOCON0&=0xF7                                                   //P0.0 as PWM3 
 437      =3  #define   PWM2_P05_OUTPUT_DISABLE   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1&=0xFB;TA=0xAA;TA=0x55
             -;SFRS&=0xFE;EA=BIT_TMP        //P1.0 as PWM2 output disable
 438      =3  #define   PWM2_P10_OUTPUT_DISABLE   PIOCON0&=0xFB                                                   //P1.0 as PWM2
 439      =3  #define   PWM1_P14_OUTPUT_DISABLE   BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;SFRS|=0x01;PIOCON1&=0xFD;TA=0xAA;TA=0x55
             -;SFRS&=0xFE;EA=BIT_TMP        //P1.4 as PWM1 output disable
 440      =3  #define   PWM1_P11_OUTPUT_DISABLE   PIOCON0&=0xFD                                                   //P1.1 as PWM1 
 441      =3  #define   PWM0_P12_OUTPUT_DISABLE   PIOCON0&=0xFE                                                   //P1.2 as PWM0 output disable
 442      =3  #define   ALL_PWM_OUTPUT_DISABLE    PIOCON0=0x00;PIOCON1=0x00
 443      =3  //--------- PWM I/O Polarity Control ---------------------------
 444      =3  #define   PWM5_OUTPUT_INVERSE     PNP|=0x20       
 445      =3  #define   PWM4_OUTPUT_INVERSE     PNP|=0x10       
 446      =3  #define   PWM3_OUTPUT_INVERSE     PNP|=0x08       
 447      =3  #define   PWM2_OUTPUT_INVERSE     PNP|=0x04       
 448      =3  #define   PWM1_OUTPUT_INVERSE     PNP|=0x02       
 449      =3  #define   PWM0_OUTPUT_INVERSE     PNP|=0x01       
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 40  

 450      =3  #define   PWM_OUTPUT_ALL_INVERSE  PNP=0xFF
 451      =3  #define   PWM5_OUTPUT_NORMAL      PNP&=0xDF       
 452      =3  #define   PWM4_OUTPUT_NORMAL      PNP&=0xEF       
 453      =3  #define   PWM3_OUTPUT_NORMAL      PNP&=0xF7       
 454      =3  #define   PWM2_OUTPUT_NORMAL      PNP&=0xFB       
 455      =3  #define   PWM1_OUTPUT_NORMAL      PNP&=0xFD       
 456      =3  #define   PWM0_OUTPUT_NORMAL      PNP&=0xFE       
 457      =3  #define   PWM_OUTPUT_ALL_NORMAL   PNP=0x00
 458      =3  //--------- PWM type define ------------------------------------
 459      =3  #define   PWM_EDGE_TYPE           PWMCON1&=~SET_BIT4
 460      =3  #define   PWM_CENTER_TYPE         PWMCON1|=SET_BIT4
 461      =3  //--------- PWM mode define ------------------------------------
 462      =3  #define   PWM_IMDEPENDENT_MODE    PWMCON1&=0x3F
 463      =3  #define   PWM_COMPLEMENTARY_MODE  PWMCON1|=0x40;PWMCON1&=0x7F
 464      =3  #define   PWM_SYNCHRONIZED_MODE   PWMCON1|=0x80;PWMCON1&=0xBF
 465      =3  #define   PWM_GP_MODE_ENABLE      PWMCON1|=0x20
 466      =3  #define   PWM_GP_MODE_DISABLE     PWMCON1&=0xDF
 467      =3  //--------- PMW interrupt setting ------------------------------
 468      =3  #define   PWM_FALLING_INT         BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xCF;TA=0xAA;TA=0x55;SFRS=0x00;
             -EA=BIT_TMP
 469      =3  #define   PWM_RISING_INT          BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=0x10;PWMCON0&=0xDF;TA=0xAA;TA=0x
             -55;SFRS=0x00;EA=BIT_TMP
 470      =3  #define   PWM_CENTRAL_POINT_INT   BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=0x20;PWMCON0&=0xEF;TA=0xAA;T
             -A=0x55;SFRS=0x00;EA=BIT_TMP
 471      =3  #define   PWM_PERIOD_END_INT      BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC|=0x30;TA=0xAA;TA=0x55;SFRS=0x00
             -;EA=BIT_TMP
 472      =3  //--------- PWM interrupt pin select ---------------------------
 473      =3  #define   PWM_INT_PWM0            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;TA=0xAA;TA=0x55;SFRS=0x00;EA
             -=BIT_TMP
 474      =3  #define   PWM_INT_PWM1            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;PWMINTC|=0x01;TA=0xAA;TA=0x5
             -5;SFRS=0x00;EA=BIT_TMP
 475      =3  #define   PWM_INT_PWM2            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;PWMINTC|=0x02;TA=0xAA;TA=0x5
             -5;SFRS=0x00;EA=BIT_TMP
 476      =3  #define   PWM_INT_PWM3            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;PWMINTC|=0x03;TA=0xAA;TA=0x5
             -5;SFRS=0x00;EA=BIT_TMP
 477      =3  #define   PWM_INT_PWM4            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;PWMINTC|=0x04;TA=0xAA;TA=0x5
             -5;SFRS=0x00;EA=BIT_TMP
 478      =3  #define   PWM_INT_PWM5            BIT_TMP=EA;TA=0xAA;TA=0x55;SFRS=0x01;PWMINTC&=0xF8;PWMINTC|=0x05;TA=0xAA;TA=0x5
             -5;SFRS=0x00;EA=BIT_TMP
 479      =3  //--------- PWM Dead time setting ------------------------------
 480      =3  #define   PWM45_DEADTIME_ENABLE     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|=0x04;EA=BIT_TMP
 481      =3  #define   PWM34_DEADTIME_ENABLE     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|=0x02;EA=BIT_TMP
 482      =3  #define   PWM01_DEADTIME_ENABLE     BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;PDTEN|=0x01;EA=BIT_TMP
 483      =3  
 484      =3  /*****************************************************************************************
 485      =3  * For ADC INIT setting 
 486      =3  *****************************************************************************************/
 487      =3  #define Enable_ADC_AIN0     ADCCON0&=0xF0;P17_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT0;ADCCON1|=SET_BIT0     
             -            //P17
 488      =3  #define Enable_ADC_AIN1     ADCCON0&=0xF0;ADCCON0|=0x01;P30_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT1;ADCCON
             -1|=SET_BIT0    //P30
 489      =3  #define Enable_ADC_AIN2     ADCCON0&=0xF0;ADCCON0|=0x02;P07_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT2;ADCCON
             -1|=SET_BIT0    //P07
 490      =3  #define Enable_ADC_AIN3     ADCCON0&=0xF0;ADCCON0|=0x03;P06_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT3;ADCCON
             -1|=SET_BIT0    //P06
 491      =3  #define Enable_ADC_AIN4     ADCCON0&=0xF0;ADCCON0|=0x04;P05_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT4;ADCCON
             -1|=SET_BIT0    //P05
 492      =3  #define Enable_ADC_AIN5     ADCCON0&=0xF0;ADCCON0|=0x05;P04_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT5;ADCCON
             -1|=SET_BIT0    //P04
 493      =3  #define Enable_ADC_AIN6     ADCCON0&=0xF0;ADCCON0|=0x06;P03_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT6;ADCCON
             -1|=SET_BIT0    //P03
 494      =3  #define Enable_ADC_AIN7     ADCCON0&=0xF0;ADCCON0|=0x07;P11_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT7;ADCCON
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 41  

             -1|=SET_BIT0    //P11
 495      =3  #define Enable_ADC_BandGap  ADCCON0|=SET_BIT3;ADCCON0&=0xF8;ADCCON1|=SET_BIT0                                             //Band-
             -gap 1.22V
 496      =3  #define Disable_ADC         ADCCON1&=0xFE;
 497      =3  
 498      =3  #define PWM0_FALLINGEDGE_TRIG_ADC   ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET_
             -BIT2;ADCCON1|=SET_BIT1
 499      =3  #define PWM2_FALLINGEDGE_TRIG_ADC   ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET_B
             -IT2;ADCCON1|=SET_BIT1
 500      =3  #define PWM4_FALLINGEDGE_TRIG_ADC   ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET_B
             -IT2;ADCCON1|=SET_BIT1
 501      =3  #define PWM0_RISINGEDGE_TRIG_ADC    ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BI
             -T2;ADCCON1|=SET_BIT1
 502      =3  #define PWM2_RISINGEDGE_TRIG_ADC    ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT
             -2;ADCCON1|=SET_BIT1
 503      =3  #define PWM4_RISINGEDGE_TRIG_ADC    ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT
             -2;ADCCON1|=SET_BIT1
 504      =3  #define PWM0_CENTRAL_TRIG_ADC       ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_BIT
             -2;ADCCON1|=SET_BIT1
 505      =3  #define PWM2_CENTRAL_TRIG_ADC       ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_BIT2
             -;ADCCON1|=SET_BIT1
 506      =3  #define PWM4_CENTRAL_TRIG_ADC       ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_BIT2
             -;ADCCON1|=SET_BIT1
 507      =3  #define PWM0_END_TRIG_ADC           ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2;A
             -DCCON1|=SET_BIT1
 508      =3  #define PWM2_END_TRIG_ADC           ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2;AD
             -CCON1|=SET_BIT1
 509      =3  #define PWM4_END_TRIG_ADC           ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2;AD
             -CCON1|=SET_BIT1
 510      =3  
 511      =3  #define P04_FALLINGEDGE_TRIG_ADC    ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1&=~SET_BIT6
 512      =3  #define P13_FALLINGEDGE_TRIG_ADC    ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1|=SET_BIT6
 513      =3  #define P04_RISINGEDGE_TRIG_ADC     ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;ADC
             -CON1&=~SET_BIT6
 514      =3  #define P13_RISINGEDGE_TRIG_ADC     ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;ADC
             -CON1|=SET_BIT6
 515      =3  
 516      =3  /*****************************************************************************************
 517      =3  * For SPI INIT setting 
 518      =3  *****************************************************************************************/
 519      =3  #define   SPICLK_DIV2             clr_SPR0;clr_SPR1
 520      =3  #define   SPICLK_DIV4             set_SPR0;clr_SPR1
 521      =3  #define   SPICLK_DIV8             clr_SPR0;set_SPR1
 522      =3  #define   SPICLK_DIV16            set_SPR0;set_SPR1
 523      =3  #define   Enable_SPI_Interrupt    set_ESPI;set_EA
 524      =3  #define   SS    P15
 525      =3  
  23      =2  
  24      =2  #include "../common/task_def.h"
   1      =3  /**
   2      =3    ******************************************************************************
   3      =3    * @file    
   4      =3    * @author  
   5      =3    * @version 
   6      =3    * @date   
   7      =3    * @brief   os_switch_task()   
   8      =3                --When TIMESHARING=0, it must call this function to switch task.
   9      =3    ******************************************************************************  
  10      =3    * 
  11      =3    * 
  12      =3    ******************************************************************************
  13      =3    */
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 42  

  14      =3  #ifndef    TASK_DEF_H
  15      =3  #define    TASK_DEF_H
  16      =3  
  17      =3  
  18      =3  /*-- includes  ---------------------------------------------------------------*/
  19      =3  #include "../includes/_sys_config.h"
   1      =4  /**
   2      =4    ******************************************************************************
   3      =4    * @file    
   4      =4    * @author  
   5      =4    * @version 
   6      =4    * @date   
   7      =4    * @brief   
   8      =4    ******************************************************************************  
   9      =4    * 
  10      =4    * 
  11      =4    ******************************************************************************
  12      =4    */
  13      =4  #ifndef    _SYS_CONFIG_H
           =4 #define    _SYS_CONFIG_H
           =4 
           =4 
           =4 /* C++ support */
           =4 #ifdef __cplusplus
           =4 extern "C" {
           =4 #endif
           =4 
           =4 
           =4 #include "./_sys_std.h"
           =4 
           =4 
           =4 /*< Configure the watchdog function.  0: disable; 1:enable. >*/
           =4 #define     WDT_ENABLE                                 1
           =4 
           =4 /*< Log output configuration. 0: disable; 1:enable. >*/
           =4 #define     LOG_ENABLE                                 1
           =4 
           =4 /*< Console configuration. 0: disable; 1:enable. >*/
           =4 #define     CONSOLE_ENABLE                             1
           =4 
           =4 
           =4 
           =4 
           =4 /* C++ support */
           =4 #ifdef __cplusplus
           =4 }
           =4 #endif
           =4 
           =4 
           =4 #endif   /* _SYS_CONFIG_H */
  45      =4  
  46      =4  /*---------------------- end of file -----------------------------------------*/
  20      =3  
  21      =3  #include <rtx51tny.h>
   1      =4  /*--------------------------------------------------------------------------
   2      =4  RTX51TNY.H
   3      =4  
   4      =4  Prototypes for RTX51 Tiny Real-Time Operating System Version 2.02
   5      =4  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =4  All rights reserved.
   7      =4  --------------------------------------------------------------------------*/
   8      =4  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 43  

   9      =4  #ifndef __RTX51TNY_H__
  10      =4  #define __RTX51TNY_H__
  11      =4  
  12      =4  
  13      =4  /* constants for os_wait function */
  14      =4  #define K_SIG      0x01              /* Wait for Signal   */
  15      =4  #define K_TMO      0x02              /* Wait for Timeout  */
  16      =4  #define K_IVL      0x80              /* Wait for Interval */
  17      =4  
  18      =4  /* function return values */
  19      =4  #define NOT_OK     0xFF              /* Parameter Error */
  20      =4  #define TMO_EVENT  0x08              /* Timeout Event   */
  21      =4  #define SIG_EVENT  0x04              /* Signal  Event   */
  22      =4  #define RDY_EVENT  0x80              /* Ready   Event   */
  23      =4  
  24      =4  extern unsigned char os_create_task     (unsigned char task_id);
  25      =4  extern unsigned char os_delete_task     (unsigned char task_id);
  26      =4  
  27      =4  extern unsigned char os_wait            (unsigned char typ, 
  28      =4                                           unsigned char ticks,
  29      =4                                           unsigned int dummy);
  30      =4  extern unsigned char os_wait1           (unsigned char typ);
  31      =4  extern unsigned char os_wait2           (unsigned char typ,
  32      =4                                           unsigned char ticks);
  33      =4  
  34      =4  extern unsigned char os_send_signal     (unsigned char task_id);
  35      =4  extern unsigned char os_clear_signal    (unsigned char task_id);
  36      =4  extern unsigned char isr_send_signal    (unsigned char task_id);
  37      =4  
  38      =4  extern void          os_set_ready       (unsigned char task_id);
  39      =4  extern void          isr_set_ready      (unsigned char task_id);
  40      =4  
  41      =4  extern unsigned char os_running_task_id (void);
  42      =4  extern unsigned char os_switch_task     (void); 
  43      =4  
  44      =4  extern void          os_reset_interval  (unsigned char ticks);
  45      =4  
  46      =4  #endif
  22      =3  
  23      =3  
  24      =3  /*-- defined  ----------------------------------------------------------------*/
  25      =3  /*< User defined. >*/
  26      =3  #define      GET_SYS_TICK()                   get_systick()
  27      =3  
  28      =3  
  29      =3  
  30      =3  /*< Task run period. >*/
  31      =3  #define      TASK_PERIOD                      TIMESHARING
  32      =3  
  33      =3  
  34      =3  
  35      =3  /*< Task timer defined. >*/
  36      =3  #define      TASK_TIMER_BEGIN(tick, period)                                    \
  37      =3               do{                                                               \
  38      =3                   if((GET_SYS_TICK()-tick) >= period)                           \
  39      =3                   {                                                             \
  40      =3                     tick = GET_SYS_TICK();                                       
  41      =3  
  42      =3  #define      TASK_TIMER_END(tick)                                              \ 
  43      =3                   }                                                             \                
  44      =3               }while(0)
  45      =3  
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 44  

  46      =3  
  47      =3  
  48      =3  
  49      =3  
  50      =3  #endif   /* MAIN_H */
  51      =3  
  52      =3  /*---------------------- end of file -----------------------------------------*/
  25      =2  #include "../common/ring_buffer.h"
   1      =3  /**
   2      =3    ******************************************************************************
   3      =3    * @file    
   4      =3    * @author  
   5      =3    * @version 
   6      =3    * @date   
   7      =3    * @brief   
   8      =3    ******************************************************************************  
   9      =3    * 
  10      =3    * 
  11      =3    ******************************************************************************
  12      =3    */
  13      =3  #ifndef  RING_BUFFER_H
  14      =3  #define  RING_BUFFER_H
  15      =3  
  16      =3  /*-- includes ----------------------------------------------------------------*/
  17      =3  #include "../includes/_sys_std.h"
   1      =4  /**
   2      =4    ******************************************************************************
   3      =4    * @file    
   4      =4    * @author  
   5      =4    * @version 
   6      =4    * @date   
   7      =4    * @brief   
   8      =4    ******************************************************************************  
   9      =4    * 
  10      =4    * 
  11      =4    ******************************************************************************
  12      =4    */
  13      =4  #ifndef  _SYS_STD_H
           =4 #define  _SYS_STD_H
           =4 
           =4 
           =4 /* C++支持 */
           =4 #ifdef __cplusplus
           =4 extern "C" {
           =4 #endif
           =4  
           =4 
           =4 
           =4 /*!< Signed integer types  */
           =4 typedef         signed char             s8_t;
           =4 typedef         signed int              s16_t;
           =4 typedef         signed long             s32_t;
           =4 
           =4 /*!< Unsigned integer types  */
           =4 typedef         unsigned char           u8_t;
           =4 typedef         unsigned int            u16_t;
           =4 typedef         unsigned long           u32_t;
           =4 
           =4 
           =4 #define       XDATA    xdata
           =4 #define       IDATA    idata
           =4 #define       BDATA    bdata
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 45  

           =4 #define       DATA     data
           =4 #define       CODE     code
           =4 
           =4 
           =4 /* 把宏参数变为一个字符串 */
           =4 #define     _STRING(x)                  #x
           =4 #define     STRING(x)                   _STRING(x)
           =4 
           =4 /* 把宏参数连接在一起 */
           =4 #define     _CONNECT_MACRO(x,y)         x##y
           =4 #define     CONNECT_MACRO(x,y)          _CONNECT_MACRO(x,y)
           =4 
           =4 
           =4 /* 状态类型 */
           =4 typedef  enum
           =4 {
           =4   OPERATE_OK  = 0,
           =4   OPERATE_BUSY,
           =4   OPERATE_TIMEOUT,
           =4   OPERATE_FAIL,
           =4 }OpsStatus;
           =4 
           =4 
           =4 #ifndef  _IN_LINE_
           =4   #define  _IN_LINE_   inline
           =4 #endif
           =4 
           =4 #ifndef   BOOL
           =4   #define   BOOL      bool
           =4 #endif
           =4 
           =4 #ifndef   NULL
           =4   #define   NULL     (void*)0
           =4 #endif
           =4 
           =4 
           =4 #ifndef  TRUE
           =4   #define   TRUE    1
           =4 #endif
           =4 
           =4 #ifndef  FALSE
           =4   #define   FALSE    0
           =4 #endif
           =4 
           =4 /* 纯虚函数关键字 */
           =4 #ifndef   VIRTUAL
           =4   #define   VIRTUAL
           =4 #endif
           =4 
           =4 
           =4 
           =4 
           =4 #ifdef __cplusplus
           =4 }
           =4 #endif
           =4 
           =4 #endif    /* _SYS_STD_H */
  95      =4  
  96      =4  /*------------------ end of file ---------------------------------------------*/
  18      =3  
  19      =3  
  20      =3  /*-- defined -----------------------------------------------------------------*/
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 46  

  21      =3  
  22      =3  
  23      =3  
  24      =3  
  25      =3  /*-- typedef -----------------------------------------------------------------*/
  26      =3  typedef    u8_t     rb_depth_t;
  27      =3  typedef    u8_t     rb_data_type;
  28      =3  
  29      =3  
  30      =3  //struct  RingBuffStruct;
  31      =3  
  32      =3  struct  RingBuffStruct  
  33      =3  {
  34      =3    rb_depth_t      posPut;    /* The current location of the ring buffer. */
  35      =3    rb_depth_t      posGet;    /* The current fetch position of the buffer. */
  36      =3    rb_depth_t      depth;     /* The total number of elements in the ring buffer. */
  37      =3    rb_depth_t      remain;
  38      =3    
  39      =3    rb_data_type*   ptBuffer;  /* Ring buffer pointer. */
  40      =3  };
  41      =3  
  42      =3  typedef  struct  RingBuffStruct  RingBuffObj;
  43      =3  
  44      =3  
  45      =3  /*-- functions ---------------------------------------------------------------*/
  46      =3  extern    void            ring_buff_create(RingBuffObj* obj, rb_depth_t depth, \
  47      =3                                             rb_data_type* ptBuffer);
  48      =3  extern    rb_depth_t      check_ring_buff(RingBuffObj* thiz);
  49      =3  extern    rb_data_type    get_ring_buff_data(RingBuffObj* thiz);
  50      =3  extern    void            put_ring_buff_data(RingBuffObj* thiz, rb_data_type dat);
  51      =3  
  52      =3  
  53      =3  #endif    /* RING_BUFFER_H */
  54      =3  
  55      =3  /*------------------ end of file ---------------------------------------------*/
  26      =2  
  27      =2  
  28      =2  
  29      =2  
  30      =2  /*-- defined  ----------------------------------------------------------------*/
  31      =2  typedef      u8_t                             tick_size_t;
  32      =2  
  33      =2  
  34      =2  #define      SYSTEM_TASK_PRIORITY             0
  35      =2  #define      BUTTON_TASK_PRIORITY             1
  36      =2  #define      LED_TASK_PRIORITY                2
  37      =2  #define      PRINT_TASK_PRIORITY              3
  38      =2  #define      CONSOLE_TASK_PRIORITY            4
  39      =2  
  40      =2  
  41      =2  
  42      =2  /*-- functions  ---------------------------------------------------------------*/
  43      =2  extern     tick_size_t    get_systick(void);
  44      =2  
  45      =2  extern     void           mcu_reset(void);
  46      =2  extern     void           mcu_wdt_init(void);
  47      =2  extern     void           mcu_wdt_feed(void);
  48      =2  
  49      =2  
  50      =2  #endif   /* SYSTEM_H */
  51      =2  
  52      =2  /*---------------------- end of file -----------------------------------------*/
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 47  

  19      =1  
  20      =1  
  21      =1  
  22      =1  /*-- defined  ----------------------------------------------------------------*/
  23      =1  typedef  enum
  24      =1  {
  25      =1    LED1 = 0,
  26      =1    LED2,
  27      =1    LED3,
  28      =1    LED4,
  29      =1  }LedDef;
  30      =1  
  31      =1  
  32      =1  typedef  enum
  33      =1  {
  34      =1    LED_OFF = 0,
  35      =1    LED_ON,
  36      =1    LED_TOGGLE,
  37      =1  }LedWrType;
  38      =1  
  39      =1  
  40      =1  /*-- functions  ---------------------------------------------------------------*/
  41      =1  void   led_write(LedDef led, LedWrType wr);
  42      =1  
  43      =1  
  44      =1  #endif   /* LED_H */
  45      =1  
  46      =1  /*---------------------- end of file -----------------------------------------*/
  15          #include "./print.h"
   1      =1  /**
   2      =1    ******************************************************************************
   3      =1    * @file    
   4      =1    * @author  
   5      =1    * @version 
   6      =1    * @date   
   7      =1    * @brief   
   8      =1    ******************************************************************************  
   9      =1    * 
  10      =1    * 
  11      =1    ******************************************************************************
  12      =1    */
  13      =1  #ifndef    PRINT_H
  14      =1  #define    PRINT_H
  15      =1  
  16      =1  
  17      =1  /*-- includes  ---------------------------------------------------------------*/
  18      =1  #include "./system.h"
   1      =2  /**
   2      =2    ******************************************************************************
   3      =2    * @file    
   4      =2    * @author  
   5      =2    * @version 
   6      =2    * @date   
   7      =2    * @brief   
   8      =2    ******************************************************************************  
   9      =2    * 
  10      =2    * 
  11      =2    ******************************************************************************
  12      =2    */
  13      =2  #ifndef    SYSTEM_H
           =2 #define    SYSTEM_H
           =2 
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 48  

           =2 
           =2 /*-- includes  ---------------------------------------------------------------*/
           =2 #include <stdio.h>
           =2 #include "../includes/_sys_config.h"
           =2 #include "../mcu/N76E003.h"
           =2 #include "../mcu/SFR_Macro.h"
           =2 #include "../mcu/Function_define.h"
           =2 
           =2 #include "../common/task_def.h"
           =2 #include "../common/ring_buffer.h"
           =2 
           =2 
           =2 
           =2 
           =2 /*-- defined  ----------------------------------------------------------------*/
           =2 typedef      u8_t                             tick_size_t;
           =2 
           =2 
           =2 #define      SYSTEM_TASK_PRIORITY             0
           =2 #define      BUTTON_TASK_PRIORITY             1
           =2 #define      LED_TASK_PRIORITY                2
           =2 #define      PRINT_TASK_PRIORITY              3
           =2 #define      CONSOLE_TASK_PRIORITY            4
           =2 
           =2 
           =2 
           =2 /*-- functions  ---------------------------------------------------------------*/
           =2 extern     tick_size_t    get_systick(void);
           =2 
           =2 extern     void           mcu_reset(void);
           =2 extern     void           mcu_wdt_init(void);
           =2 extern     void           mcu_wdt_feed(void);
           =2 
           =2 
           =2 #endif   /* SYSTEM_H */
  51      =2  
  52      =2  /*---------------------- end of file -----------------------------------------*/
  19      =1  
  20      =1  
  21      =1  
  22      =1  /*-- defined  ----------------------------------------------------------------*/
  23      =1  
  24      =1  
  25      =1  /*< Log configuration. >*/
  26      =1  #if   LOG_ENABLE
  27      =1    #define         LOG              printf 
  28      =1  #else 
           =1   #define         LOG 
           =1 #endif 
  31      =1  
  32      =1  
  33      =1  
  34      =1  typedef   void  (*PrintRxCallbackFunc)(u8_t dat);
  35      =1  
  36      =1  
  37      =1  
  38      =1  /*-- functions  ---------------------------------------------------------------*/
  39      =1  extern   void     print_rx_callback_register(PrintRxCallbackFunc  func);
  40      =1  extern   void     my_printf(char * c, ...);
  41      =1  
  42      =1  
  43      =1  #endif   /* PRINT_H */
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 49  

  44      =1  
  45      =1  /*---------------------- end of file -----------------------------------------*/
  16          
  17          
  18          /*-- defined -----------------------------------------------------------------*/
  19          
  20          
  21          #define        TIME_MS(x)                 (x)
  22          
  23                                                     
  24          #define        IO_LED1_MODE()              P11_PushPull_Mode
  25          #define        IO_LED2_MODE()              P12_PushPull_Mode
  26          #define        IO_LED3_MODE()              P13_PushPull_Mode
  27          #define        IO_LED4_MODE()              P14_PushPull_Mode
  28                                                                         
  29          
  30          #define        LED1_ON()                   P11 = 1
  31          #define        LED1_OFF()                  P11 = 0
  32          #define        LED1_TOGGLE()               P11 = !P11    
  33          
  34          #define        LED2_ON()                   P12 = 1
  35          #define        LED2_OFF()                  P12 = 0
  36          #define        LED2_TOGGLE()               P12 = !P12 
  37          
  38          #define        LED3_ON()                   P13 = 1
  39          #define        LED3_OFF()                  P13 = 0
  40          #define        LED3_TOGGLE()               P13 = !P13 
  41          
  42          #define        LED4_ON()                   P14 = 1
  43          #define        LED4_OFF()                  P14 = 0
  44          #define        LED4_TOGGLE()               P14 = !P14
  45          
  46          
  47          /*-- private variables -------------------------------------------------------*/
  48          static   tick_size_t XDATA ledTaskBaseTr = 0;
  49          
  50          
  51          
  52          /*-- functions ---------------------------------------------------------------*/
  53          static    void    led_task_timer_schedule(void);
  54          static    void    led_task_logic_schedule(void);
  55          
  56          
  57          
  58          /**           
  59            * @brief            
  60            * @param    
  61            * @return  
  62            * @note
  63            */
  64          void   led_write(LedDef led, LedWrType wr)
  65          {
  66   1        switch(led)
  67   1        {
  68   2          case LED1:
  69   2          {
  70   3            if(wr == LED_OFF)             LED1_OFF(); 
  71   3            else if(wr == LED_ON)         LED1_ON();
  72   3            else if(wr == LED_TOGGLE)     LED1_TOGGLE(); 
  73   3          }break;
  74   2      
  75   2          case LED2:
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 50  

  76   2          {
  77   3            if(wr == LED_OFF)             LED2_OFF(); 
  78   3            else if(wr == LED_ON)         LED2_ON();
  79   3            else if(wr == LED_TOGGLE)     LED2_TOGGLE();
  80   3          }break;
  81   2      
  82   2          case LED3:
  83   2          {
  84   3            if(wr == LED_OFF)             LED3_OFF(); 
  85   3            else if(wr == LED_ON)         LED3_ON();
  86   3            else if(wr == LED_TOGGLE)     LED3_TOGGLE();    
  87   3          }break;
  88   2      
  89   2          case LED4:
  90   2          {
  91   3            if(wr == LED_OFF)             LED4_OFF(); 
  92   3            else if(wr == LED_ON)         LED4_ON();
  93   3            else if(wr == LED_TOGGLE)     LED4_TOGGLE();    
  94   3          }break;
  95   2          
  96   2          default:
  97   2            break;  
  98   2        }
  99   1      }
 100          
 101          
 102          /**           
 103            * @brief            
 104            * @param    
 105            * @return  
 106            * @note
 107            */
 108          static  void  led_task_timer_schedule(void)
 109          {
 110   1        TASK_TIMER_BEGIN(ledTaskBaseTr, TIME_MS(100));
 111   3      
 112   3      
 113   3      
 114   3        TASK_TIMER_END(ledTaskBaseTr);
 115   1      }
 116          
 117          
 118          /**           
 119            * @brief            
 120            * @param    
 121            * @return  
 122            * @note
 123            */
 124          static  void  led_task_logic_schedule(void)
 125          {
 126   1      
 127   1      }
 128          
 129          
 130          /**           
 131            * @brief            
 132            * @param    
 133            * @return  
 134            * @note
 135            */
 136          void   led_task(void)  _task_   LED_TASK_PRIORITY
 137          {
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 51  

 138   1        /* Led pin configure. */
 139   1        IO_LED1_MODE(); IO_LED2_MODE(); IO_LED3_MODE(); IO_LED4_MODE();
 140   1      
 141   1        while(1)
 142   1        {
 143   2          led_task_timer_schedule();
 144   2          led_task_logic_schedule();  
 145   2          
 146   2          os_switch_task(); 
 147   2        }
 148   1      }
 149          
 150          
 151          
 152          
 153          /*---------------------- end of file -----------------------------------------*/
 154          
 155          
 156          
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 52  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
s8_t . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
P1M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
u8_t . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
led_task_timer_schedule. . . . . . . .  STATIC   CODE   PROC     0000H  -----
LedWrType. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
LED1 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PWMCON0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
LED2 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LED3 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LED4 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
OPERATE_OK . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OPERATE_FAIL . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ledTaskBaseTr. . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
LED_OFF. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
OPERATE_TIMEOUT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
tick_size_t. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
RingBuffStruct . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  posPut . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  posGet . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  depth. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  remain . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ptBuffer . . . . . . . . . . . . . .  MEMBER   -----  PTR      0004H  3
rb_depth_t . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
LedDef . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
s32_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
u32_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
get_systick. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
u16_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P11. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P12. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P13. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
RingBuffObj. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  posPut . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  posGet . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  depth. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  remain . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ptBuffer . . . . . . . . . . . . . .  MEMBER   -----  PTR      0004H  3
P14. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
OPERATE_BUSY . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OpsStatus. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_led_write . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  led. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  wr . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
SCON_1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
led_task . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LED_ON . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   LED                                                                   06/13/2020 14:37:38 PAGE 53  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADCCON0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
os_switch_task . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
led_task_logic_schedule. . . . . . . .  STATIC   CODE   PROC     0000H  -----
rb_data_type . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
LED_TOGGLE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
PrintRxCallbackFunc. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    153    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
