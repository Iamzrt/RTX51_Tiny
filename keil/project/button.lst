C51 COMPILER V9.00   BUTTON                                                                06/10/2020 17:55:17 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BUTTON
OBJECT MODULE PLACED IN ..\obj\button.obj
COMPILER INVOKED BY: D:\Program Files\KEILC51\files\C51\BIN\C51.EXE ..\..\user\button.c BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\button.lst) TABS(2) OBJECT(..\obj\button.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    
   4            * @author  
   5            * @version 
   6            * @date   
   7            * @brief     Support 8 buttons.
   8            ******************************************************************************  
   9            * 
  10            * 
  11            ******************************************************************************
  12            */
  13          /*-- includes ----------------------------------------------------------------*/
  14          #include "./button.h"
  15          #include "./led.h"
  16          
  17          
  18          /*-- defined -----------------------------------------------------------------*/
  19          #define        DB_LOG(x)                  LOG("[BTN]");LOG(x)
  20          #define        TIME_MS(x)                 (x)
  21          
  22          
  23          
  24          #define        IO_BTN1_MODE()               P30_Input_Mode
  25          
  26          
  27          /*< User defined. Max button = 8. 0: not use. >*/
  28          #define        GET_BTN1_STATE()                 P30
  29          #define        GET_BTN2_STATE()                 0
  30          #define        GET_BTN3_STATE()                 0
  31          #define        GET_BTN4_STATE()                 0
  32          #define        GET_BTN5_STATE()                 0
  33          #define        GET_BTN6_STATE()                 0
  34          #define        GET_BTN7_STATE()                 0
  35          #define        GET_BTN8_STATE()                 0
  36          
  37          
  38          
  39          typedef   struct
  40          {
  41            u8_t    currState;
  42            u8_t    lastState;
  43            u8_t    trigDown;
  44            u8_t    trigUp;
  45            u8_t    prevTrig;
  46          }BtnDetectDef;
  47          
  48          
  49          /*-- private variables -------------------------------------------------------*/
  50          static   tick_size_t  XDATA  buttonTaskBaseTr = 0;
  51          
  52          static   BtnDetectDef  XDATA    buttonList;
  53          
  54          
C51 COMPILER V9.00   BUTTON                                                                06/10/2020 17:55:17 PAGE 2   

  55          
  56          /*-- functions ---------------------------------------------------------------*/
  57          static    void    button_task_timer_schedule(void);
  58          static    void    button_task_logic_schedule(void);
  59          
  60          
  61          /**           
  62            * @brief            
  63            * @param    
  64            * @return  
  65            * @note
  66            */ 
  67          static  void  read_button_status(BtnDetectDef* ptBtn, u8_t  buttonArray)
  68          {
  69   1        ptBtn->lastState = ptBtn->currState;
  70   1        ptBtn->currState = buttonArray^0xff;      /* reverse */
  71   1        
  72   1        if(ptBtn->lastState ^ ptBtn->currState)
  73   1        {
  74   2          /* Filt pulse. */
  75   2          return;
  76   2        } 
  77   1        else
  78   1        {
  79   2          ptBtn->trigDown = ptBtn->currState & (ptBtn->currState ^ ptBtn->prevTrig); /* button down, trig once. *
             -/
  80   2          //ptBtn->trigUp = ptBtn->prevTrig & (ptBtn->currState ^ ptBtn->prevTrig);    /* button up, trig once. *
             -/
  81   2          ptBtn->prevTrig = ptBtn->currState;
  82   2        }                            
  83   1      }
  84          
  85          
  86          /**           
  87            * @brief            
  88            * @param    
  89            * @return  
  90            * @note
  91            */
  92          static  void  button_task_timer_schedule(void)
  93          {
  94   1        u8_t XDATA  buttonArray = 0; 
  95   1        u8_t XDATA  ioState = 0;
  96   1      
  97   1        TASK_TIMER_BEGIN(buttonTaskBaseTr, TIME_MS(20));
  98   3      
  99   3        /* Read IO state. */
 100   3        ioState = GET_BTN1_STATE();
 101   3        buttonArray |= (ioState << 0);
 102   3        ioState = GET_BTN2_STATE();
 103   3        buttonArray |= (ioState << 1);
 104   3        ioState = GET_BTN3_STATE();
 105   3        buttonArray |= (ioState << 2);
 106   3        ioState = GET_BTN4_STATE();
 107   3        buttonArray |= (ioState << 3);
 108   3        ioState = GET_BTN5_STATE();
 109   3        buttonArray |= (ioState << 4);
 110   3        ioState = GET_BTN6_STATE();
 111   3        buttonArray |= (ioState << 5);
 112   3        ioState = GET_BTN7_STATE();
 113   3        buttonArray |= (ioState << 6);
 114   3        ioState = GET_BTN8_STATE();
C51 COMPILER V9.00   BUTTON                                                                06/10/2020 17:55:17 PAGE 3   

 115   3        buttonArray |= (ioState << 7);
 116   3        read_button_status(&buttonList, buttonArray);
 117   3      
 118   3        /* Button 1 trig action. */
 119   3        if(buttonList.trigDown & (1<<0)) 
 120   3        {
 121   4          LED1_TOGGLE();
 122   4        }
 123   3      
 124   3        /* Button 2 trig action. */
 125   3        if(buttonList.trigDown & (1<<1)) 
 126   3        {
 127   4          
 128   4        }
 129   3      
 130   3        /* Button 3 trig action. */
 131   3        if(buttonList.trigDown & (1<<2)) 
 132   3        {
 133   4          
 134   4        }
 135   3      
 136   3        /* Button 4 trig action. */
 137   3        if(buttonList.trigDown & (1<<3)) 
 138   3        {
 139   4          
 140   4        }
 141   3      
 142   3        /* Button 5 trig action. */
 143   3        if(buttonList.trigDown & (1<<4)) 
 144   3        {
 145   4      
 146   4        }
 147   3      
 148   3        /* Button 6 trig action. */
 149   3        if(buttonList.trigDown & (1<<5)) 
 150   3        {
 151   4      
 152   4        }
 153   3      
 154   3        /* Button 7 trig action. */
 155   3        if(buttonList.trigDown & (1<<6)) 
 156   3        {
 157   4      
 158   4        }
 159   3      
 160   3        /* Button 8 trig action. */
 161   3        if(buttonList.trigDown & (1<<7)) 
 162   3        {
 163   4      
 164   4        }
 165   3      
 166   3        TASK_TIMER_END(buttonTaskBaseTr);
 167   1      }
 168          
 169          
 170          /**           
 171            * @brief            
 172            * @param    
 173            * @return  
 174            * @note
 175            */
 176          static  void  button_task_logic_schedule(void)
C51 COMPILER V9.00   BUTTON                                                                06/10/2020 17:55:17 PAGE 4   

 177          {    
 178   1        
 179   1      
 180   1      
 181   1      }
 182          
 183          
 184          /**           
 185            * @brief            
 186            * @param    
 187            * @return  
 188            * @note
 189            */
 190          void   button_task(void)   _task_   BUTTON_TASK_PRIORITY
 191          {  
 192   1        /* Button pin configuration. */
 193   1        IO_BTN1_MODE();
 194   1      
 195   1        while(1)
 196   1        {
 197   2          button_task_timer_schedule();
 198   2          button_task_logic_schedule();
 199   2        }
 200   1      }
 201          
 202          
 203          
 204          
 205          /*---------------------- end of file -----------------------------------------*/
 206          
 207          
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    243    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
